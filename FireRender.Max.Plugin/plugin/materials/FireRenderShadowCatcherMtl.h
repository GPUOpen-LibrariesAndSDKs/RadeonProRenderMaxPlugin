#pragma once

#include "FireRenderMtlBase.h"

FIRERENDER_NAMESPACE_BEGIN;

enum FRSHADOWCATCHERMtl_TexmapId
{
	FRSHADOWCATCHERMTL_MAP_NORMAL = 0,
	FRSHADOWCATCHERMTL_MAP_DISPLACEMENT = 1,
	FRSHADOWCATCHERMTL_MAP_SHADOW_COLOR = 2,
	FRSHADOWCATCHERMTL_MAP_BACKGROUND_COLOR = 3,
};

enum FRSHADOWCATCHERMtl_ParamID : ParamID
{
	FRSHADOWCATCHER_NORMAL_MUL = 1000,
	FRSHADOWCATCHER_NORMAL = 1001,
	FRSHADOWCATCHER_NORMAL_MAP = 1002,
	FRSHADOWCATCHER_NORMAL_USEMAP = 1003,

	FRSHADOWCATCHER_DISPLACE_MUL = 1010,
	FRSHADOWCATCHER_DISPLACE = 1011,
	FRSHADOWCATCHER_DISPLACE_MAP = 1012,
	FRSHADOWCATCHER_DISPLACE_USEMAP = 1013,

	FRSHADOWCATCHER_SHADOW_COLOR_MUL = 1020,
	FRSHADOWCATCHER_SHADOW_COLOR = 1021,
	FRSHADOWCATCHER_SHADOW_COLOR_MAP = 1022,
	FRSHADOWCATCHER_SHADOW_COLOR_USEMAP = 1023,

	FRSHADOWCATCHER_SHADOW_WEIGHT_MUL = 1030,

	FRSHADOWCATCHER_SHADOW_ALPHA_MUL = 1040,

	FRSHADOWCATCHER_IS_BACKGROUND = 1051,

	FRSHADOWCATCHER_BACKGROUND_COLOR_MUL = 1060,
	FRSHADOWCATCHER_BACKGROUND_COLOR = 1061,
	FRSHADOWCATCHER_BACKGROUND_COLOR_MAP = 1062,
	FRSHADOWCATCHER_BACKGROUND_COLOR_USEMAP = 1063,

	FRSHADOWCATCHER_BACKGROUND_WEIGHT_MUL = 1070,

	FRSHADOWCATCHER_BACKGROUND_ALPHA_MUL = 1080,
};

BEGIN_DECLARE_FRMTLCLASSDESC(SHADOWCATCHERMtl, L"RPR Shadow Catcher Material", FIRERENDER_SCMTL_CID)
END_DECLARE_FRMTLCLASSDESC()

BEGIN_DECLARE_FRMTL(SHADOWCATCHERMtl)

public:
	//virtual Color GetDiffuse(int mtlNum, BOOL backFace) override;

	frw::Shader getVolumeShader(const TimeValue t, MaterialParser& mtlParser, INode* node);

private:
	std::tuple<bool, Texmap*, Color, float> GetParameters(FRSHADOWCATCHERMtl_ParamID useMapId,
		FRSHADOWCATCHERMtl_ParamID mapId, FRSHADOWCATCHERMtl_ParamID colorId, FRSHADOWCATCHERMtl_ParamID mulId);
	frw::Value SetupShaderOrdinary(MaterialParser& mtlParser, std::tuple<bool, Texmap*, Color, float> parameters, int mapFlags);

END_DECLARE_FRMTL(SHADOWCATCHERMtl)

FIRERENDER_NAMESPACE_END;
