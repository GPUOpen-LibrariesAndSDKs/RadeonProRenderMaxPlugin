#pragma once

#include "FireRenderMtlBase.h"

#include <functional>

FIRERENDER_NAMESPACE_BEGIN

enum FRUberMtlV3_TexmapId
{
// Diffuse
	FRUBERMTLV3_MAP_DIFFUSE_COLOR = 0,
	FRUBERMTLV3_MAP_DIFFUSE_WEIGHT,
	FRUBERMTLV3_MAP_DIFFUSE_ROUGHNESS,
	FRUBERMTLV3_MAP_DIFFUSE_NORMAL,
	FRUBERMTLV3_MAP_DIFFUSE_BACKSCATTERING_WEIGHT,
	FRUBERMTLV3_MAP_DIFFUSE_BACKSCATTERING_COLOR,

// Reflection
	FRUBERMTLV3_MAP_REFLECTION_COLOR,
	FRUBERMTLV3_MAP_REFLECTION_WEIGHT,
	FRUBERMTLV3_MAP_REFLECTION_ROUGHNESS,
	FRUBERMTLV3_MAP_REFLECTION_ANISOTROPY,
	FRUBERMTLV3_MAP_REFLECTION_ANISOTROPY_ROTATION,
	FRUBERMTLV3_MAP_REFLECTION_IOR,
	FRUBERMTLV3_MAP_REFLECTION_METALNESS,
	FRUBERMTLV3_MAP_REFLECTION_NORMAL,

// Refraction
	FRUBERMTLV3_MAP_REFRACTION_COLOR,
	FRUBERMTLV3_MAP_REFRACTION_WEIGHT,
	FRUBERMTLV3_MAP_REFRACTION_ROUGHNESS,
	FRUBERMTLV3_MAP_REFRACTION_IOR,
	FRUBERMTLV3_MAP_REFRACTION_ABSORPTION_DISTANCE,
	FRUBERMTLV3_MAP_REFRACTION_ABSORPTION_COLOR,
	FRUBERMTLV3_MAP_REFRACTION_NORMAL,

// Coating
	FRUBERMTLV3_MAP_COATING_COLOR,
	FRUBERMTLV3_MAP_COATING_WEIGHT,
	FRUBERMTLV3_MAP_COATING_ROUGHNESS,
	FRUBERMTLV3_MAP_COATING_IOR,
	FRUBERMTLV3_MAP_COATING_NORMAL,
	FRUBERMTLV3_MAP_COATING_THICKNESS,
	FRUBERMTLV3_MAP_COATING_TRANSMISSION_COLOR,

// Emissive
	FRUBERMTLV3_MAP_EMISSIVE_COLOR,
	FRUBERMTLV3_MAP_EMISSIVE_WEIGHT,

// Subsurface scattering
	FRUBERMTLV3_MAP_SSS_WEIGHT,
	FRUBERMTLV3_MAP_SSS_COLOR,
	FRUBERMTLV3_MAP_SSS_RADIUS,
	FRUBERMTLV3_MAP_SSS_DIRECTION,

// Normal
	FRUBERMTLV3_MAP_NORMAL,

// Transparency
	FRUBERMTLV3_MAP_TRANSPARENCY,

// Displacement
	FRUBERMTLV3_MAP_DISPLACEMENT
};

enum FRUberMtlV3_ParamID : ParamID
{
// Diffuse
	FRUBERMTLV3_DIFFUSE_ENABLE = 100,
	FRUBERMTLV3_DIFFUSE_COLOR,
	FRUBERMTLV3_DIFFUSE_COLOR_MAP,
	FRUBERMTLV3_DIFFUSE_WEIGHT,
	FRUBERMTLV3_DIFFUSE_WEIGHT_MAP,
	FRUBERMTLV3_DIFFUSE_ROUGHNESS,
	FRUBERMTLV3_DIFFUSE_ROUGHNESS_MAP,
	FRUBERMTLV3_DIFFUSE_USE_SHADER_NORMAL,
	FRUBERMTLV3_DIFFUSE_NORMAL_MAP,
	FRUBERMTLV3_DIFFUSE_BACKSCATTERING_WEIGHT,
	FRUBERMTLV3_DIFFUSE_BACKSCATTERING_WEIGHT_MAP,
	FRUBERMTLV3_DIFFUSE_SEPARATE_BACKSCATTERING_COLOR,
	FRUBERMTLV3_DIFFUSE_BACKSCATTERING_COLOR,
	FRUBERMTLV3_DIFFUSE_BACKSCATTERING_COLOR_MAP,

// Reflection
	FRUBERMTLV3_REFLECTION_ENABLE = 200,
	FRUBERMTLV3_REFLECTION_COLOR,
	FRUBERMTLV3_REFLECTION_COLOR_MAP,	
	FRUBERMTLV3_REFLECTION_WEIGHT,
	FRUBERMTLV3_REFLECTION_WEIGHT_MAP,
	FRUBERMTLV3_REFLECTION_ROUGHNESS,
	FRUBERMTLV3_REFLECTION_ROUGHNESS_MAP,
	FRUBERMTLV3_REFLECTION_ANISOTROPY,
	FRUBERMTLV3_REFLECTION_ANISOTROPY_MAP,
	FRUBERMTLV3_REFLECTION_ANISOTROPY_ROTATION,
	FRUBERMTLV3_REFLECTION_ANISOTROPY_ROTATION_MAP,
	FRUBERMTLV3_REFLECTION_MODE,
	FRUBERMTLV3_REFLECTION_IOR,
	FRUBERMTLV3_REFLECTION_IOR_MAP,
	FRUBERMTLV3_REFLECTION_METALNESS,
	FRUBERMTLV3_REFLECTION_METALNESS_MAP,
	FRUBERMTLV3_REFLECTION_USE_SHADER_NORMAL,
	FRUBERMTLV3_REFLECTION_NORMAL_MAP,

// Refraction
	FRUBERMTLV3_REFRACTION_ENABLE = 300,
	FRUBERMTLV3_REFRACTION_COLOR,
	FRUBERMTLV3_REFRACTION_COLOR_MAP,
	FRUBERMTLV3_REFRACTION_WEIGHT,
	FRUBERMTLV3_REFRACTION_WEIGHT_MAP,
	FRUBERMTLV3_REFRACTION_ROUGHNESS,
	FRUBERMTLV3_REFRACTION_ROUGHNESS_MAP,
	FRUBERMTLV3_REFRACTION_IOR,
	FRUBERMTLV3_REFRACTION_IOR_MAP,
	FRUBERMTLV3_REFRACTION_THIN_SURFACE,
	FRUBERMTLV3_REFRACTION_ABSORPTION_DISTANCE,
	FRUBERMTLV3_REFRACTION_ABSORPTION_DISTANCE_MAP,
	FRUBERMTLV3_REFRACTION_ALLOW_CAUSTICS,
	FRUBERMTLV3_REFRACTION_ABSORPTION,        // obsolete, left for compatibility
	FRUBERMTLV3_REFRACTION_ABSORPTION_MAP,    // obsolete, left for compatibility
	FRUBERMTLV3_REFRACTION_ABSORPTION_COLOR,
	FRUBERMTLV3_REFRACTION_ABSORPTION_COLOR_MAP,
	FRUBERMTLV3_REFRACTION_USE_SHADER_NORMAL,
	FRUBERMTLV3_REFRACTION_NORMAL_MAP,

// Coating
	FRUBERMTLV3_COATING_ENABLE = 400,
	FRUBERMTLV3_COATING_COLOR,
	FRUBERMTLV3_COATING_COLOR_MAP,
	FRUBERMTLV3_COATING_WEIGHT,
	FRUBERMTLV3_COATING_WEIGHT_MAP,
	FRUBERMTLV3_COATING_ROUGHNESS,
	FRUBERMTLV3_COATING_ROUGHNESS_MAP,
	FRUBERMTLV3_COATING_IOR,
	FRUBERMTLV3_COATING_IOR_MAP,
	FRUBERMTLV3_COATING_USE_SHADER_NORMAL,
	FRUBERMTLV3_COATING_NORMAL_MAP,
	FRUBERMTLV3_COATING_THICKNESS,
	FRUBERMTLV3_COATING_THICKNESS_MAP,
	FRUBERMTLV3_COATING_TRANSMISSION_COLOR,
	FRUBERMTLV3_COATING_TRANSMISSION_COLOR_MAP,

// Emissive
	FRUBERMTLV3_EMISSIVE_ENABLE = 500,
	FRUBERMTLV3_EMISSIVE_COLOR,
	FRUBERMTLV3_EMISSIVE_COLOR_MAP,
	FRUBERMTLV3_EMISSIVE_WEIGHT,
	FRUBERMTLV3_EMISSIVE_WEIGHT_MAP,
	FRUBERMTLV3_EMISSIVE_INTENSITY,
	FRUBERMTLV3_EMISSIVE_DOUBLE_SIDED,

// Subsurface scattering
	FRUBERMTLV3_SSS_ENABLE = 600,
	FRUBERMTLV3_SSS_WEIGHT,
	FRUBERMTLV3_SSS_WEIGHT_MAP,
	FRUBERMTLV3_SSS_USE_DIFFUSE_COLOR,
	FRUBERMTLV3_SSS_COLOR,
	FRUBERMTLV3_SSS_COLOR_MAP,
	FRUBERMTLV3_SSS_RADIUS,
	FRUBERMTLV3_SSS_RADIUS_MAP,
	FRUBERMTLV3_SSS_DIRECTION,
	FRUBERMTLV3_SSS_DIRECTION_MAP,
	FRUBERMTLV3_SSS_MULTIPLE_SCATTERING,

// Normal
	FRUBERMTLV3_NORMAL_ENABLE = 700,
	FRUBERMTLV3_NORMAL_MAP,

// Transparency
	FRUBERMTLV3_TRANSPARENCY_ENABLE = 800,
	FRUBERMTLV3_TRANSPARENCY,
	FRUBERMTLV3_TRANSPARENCY_MAP,

// Displacement
	FRUBERMTLV3_DISPLACEMENT_ENABLE = 900,
	FRUBERMTLV3_DISPLACEMENT_MAP,
	FRUBERMTLV3_DISPLACEMENT_MIN,
	FRUBERMTLV3_DISPLACEMENT_MAX,
	FRUBERMTLV3_DISPLACEMENT_SUBDIV_TYPE,
	FRUBERMTLV3_DISPLACEMENT_SUBDIV,
	FRUBERMTLV3_DISPLACEMENT_CREASE_WEIGHT,
	FRUBERMTLV3_DISPLACEMENT_BOUNDARY_INTEROP_TYPE,
};

enum RprSubdivType
{
	Adaptive,
	Level,
	RprSubdivTypeMax
};

struct RprDisplacementParams
{
	float min;
	float max;

	RprSubdivType subdivType;
	int factor;
	float creaseWeight;
	int boundaryInteropType;
};

BEGIN_DECLARE_FRMTLCLASSDESC(UberMtlv3, L"RPR Uber Material", FIRERENDER_UBERMTLV3_CID)
END_DECLARE_FRMTLCLASSDESC()

BEGIN_DECLARE_FRMTL(UberMtlv3)

public:
	virtual Color GetDiffuse(int mtlNum, BOOL backFace) override;
	frw::Shader getVolumeShader(const TimeValue t, MaterialParser& mtlParser, INode* node);

	void GetDisplacement(bool& isEnabled, RprDisplacementParams& displacementParams);

END_DECLARE_FRMTL(UberMtlv3)

class Uber3DlgProc : public ParamMap2UserDlgProc
{
	enum
	{
		COMBO_INDEX_IOR_MODE = 0,
		COMBO_INDEX_METALNESS_MODE = 1
	};

	using MsgProc = INT_PTR (*)(TimeValue t, IParamMap2* map, HWND hWnd, WPARAM wParam, LPARAM lParam);

public:
	virtual INT_PTR DlgProc(TimeValue t, IParamMap2* map, HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) override;
	virtual void DeleteThis() override;

private:
	static INT_PTR MsgProcInitDialog(TimeValue t, IParamMap2* map, HWND hWnd, WPARAM wParam, LPARAM lParam);
	static INT_PTR MsgProcClose(TimeValue t, IParamMap2* map, HWND hWnd, WPARAM wParam, LPARAM lParam);
	static INT_PTR MsgProcCommand(TimeValue t, IParamMap2* map, HWND hWnd, WPARAM wParam, LPARAM lParam);
};

FIRERENDER_NAMESPACE_END
