/*********************************************************************************************************************************
* Radeon ProRender for 3ds Max plugin
* Copyright (c) 2017 AMD
* All Rights Reserved
*
* Radeon ProRender dedicated custom material plugin
*********************************************************************************************************************************/
#include "FireRenderUberMtlv3.h"

#include "Resource.h"
#include "parser\MaterialParser.h"
#include "maxscript\mxsplugin\mxsPlugin.h"

#include "RprSupport.h"

#include <functional>

FIRERENDER_NAMESPACE_BEGIN

enum
{
	ROLLOUT_DIFFUSE,
	ROLLOUT_REFLECTION,
	ROLLOUT_REFRACTION,
	ROLLOUT_COATING,
	ROLLOUT_EMISSIVE,
	ROLLOUT_SSS,
	ROLLOUT_NORMAL,
	ROLLOUT_TRANSPARENCY,
	ROLLOUT_DISPLACEMENT,
	ROLLOUT_MAX
};


IMPLEMENT_FRMTLCLASSDESC(UberMtlv3)


FRMTLCLASSDESCNAME(UberMtlv3) FRMTLCLASSNAME(UberMtlv3)::ClassDescInstance;


// All parameters of the material plugin. See FIRE_MAX_PBDESC definition for notes on backwards compatibility
static ParamBlockDesc2 pbDesc(
	0, _T("UberMtlv3Pbdesc"), 0, &FRMTLCLASSNAME(UberMtlv3)::ClassDescInstance,
	P_AUTO_CONSTRUCT | P_AUTO_UI | P_MULTIMAP | P_VERSION, FIRERENDERMTLVER_LATEST, 0,
	
// rollouts
	ROLLOUT_MAX,
	ROLLOUT_DIFFUSE, IDD_MTL_UBERV3_DIFFUSE, IDS_MTL_UBERV3_DIFFUSE, 0, 0, NULL,
	ROLLOUT_REFLECTION, IDD_MTL_UBERV3_REFLECTION, IDS_MTL_UBERV3_REFLECTION, 0, APPENDROLL_CLOSED, NULL,
	ROLLOUT_REFRACTION, IDD_MTL_UBERV3_REFRACTION, IDS_MTL_UBERV3_REFRACTION, 0, APPENDROLL_CLOSED, NULL,
	ROLLOUT_COATING, IDD_MTL_UBERV3_COATING, IDS_MTL_UBERV3_COATING, 0, APPENDROLL_CLOSED, NULL,
	ROLLOUT_EMISSIVE, IDD_MTL_UBERV3_EMISSIVE, IDS_MTL_UBERV3_EMISSIVE, 0, APPENDROLL_CLOSED, NULL,
	ROLLOUT_SSS, IDD_MTL_UBERV3_SSS, IDS_MTL_UBERV3_SSS, 0, APPENDROLL_CLOSED, NULL,
	ROLLOUT_NORMAL, IDD_MTL_UBERV3_NORMAL, IDS_MTL_UBERV3_NORMAL, 0, APPENDROLL_CLOSED, NULL,
	ROLLOUT_TRANSPARENCY, IDD_MTL_UBERV3_TRANSPARENCY, IDS_MTL_UBERV3_TRANSPARENCY, 0, APPENDROLL_CLOSED, NULL,
	ROLLOUT_DISPLACEMENT, IDD_MTL_UBERV3_DISPLACEMENT, IDS_MTL_UBERV3_DISPLACEMENT, 0, APPENDROLL_CLOSED, NULL,

// Diffuse
	FRUBERMTLV3_DIFFUSE_ENABLE, _T("DiffuseEnable"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE,
	p_ui, ROLLOUT_DIFFUSE, TYPE_SINGLECHEKBOX, IDC_UBER3_DIFFUSE_ENABLE,
	PB_END,

	FRUBERMTLV3_DIFFUSE_COLOR, _T("DiffuseColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(0.5f, 0.5f, 0.5f),
	p_ui, ROLLOUT_DIFFUSE, TYPE_COLORSWATCH, IDC_UBER3_DIFFUSE_COLOR,
	PB_END,

	FRUBERMTLV3_DIFFUSE_COLOR_MAP, _T("DiffuseColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_DIFFUSE_COLOR,
	p_ui, ROLLOUT_DIFFUSE, TYPE_TEXMAPBUTTON, IDC_UBER3_DIFFUSE_COLOR_T,
	PB_END,

	FRUBERMTLV3_DIFFUSE_WEIGHT, _T("DiffuseWeight"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.0f,
	p_range, 0.0f, 1.0f,
	p_ui, ROLLOUT_DIFFUSE, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_DIFFUSE_WEIGHT, IDC_UBER3_DIFFUSE_WEIGHT_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_DIFFUSE_WEIGHT_MAP, _T("DiffuseWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_DIFFUSE_WEIGHT,
	p_ui, ROLLOUT_DIFFUSE, TYPE_TEXMAPBUTTON, IDC_UBER3_DIFFUSE_WEIGHT_T,
	PB_END,

	FRUBERMTLV3_DIFFUSE_ROUGHNESS, _T("DiffuseRoughness"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.5f,
	p_range, 0.0f, 1.0f,
	p_ui, ROLLOUT_DIFFUSE, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_DIFFUSE_ROUGHNESS, IDC_UBER3_DIFFUSE_ROUGHNESS_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_DIFFUSE_ROUGHNESS_MAP, _T("DiffuseRoughnessTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_DIFFUSE_ROUGHNESS,
	p_ui, ROLLOUT_DIFFUSE, TYPE_TEXMAPBUTTON, IDC_UBER3_DIFFUSE_ROUGHNESS_T,
	PB_END,

	FRUBERMTLV3_DIFFUSE_USE_SHADER_NORMAL, _T("DiffuseUseShaderNormal"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE,
	p_ui, ROLLOUT_DIFFUSE, TYPE_SINGLECHEKBOX, IDC_UBER3_DIFFUSE_USE_SHADER_NORMAL,
	PB_END,

	FRUBERMTLV3_DIFFUSE_NORMAL_MAP, _T("DiffuseNormalTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_DIFFUSE_NORMAL,
	p_ui, ROLLOUT_DIFFUSE, TYPE_TEXMAPBUTTON, IDC_UBER3_DIFFUSE_NORMAL_T,
	PB_END,

	FRUBERMTLV3_DIFFUSE_BACKSCATTERING_WEIGHT, _T("DiffuseBackscatteringWeight"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.0f,
	p_range, 0.0f, 1.0f,
	p_ui, ROLLOUT_DIFFUSE, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_DIFFUSE_BACKSCATTERING_WEIGHT,
		IDC_UBER3_DIFFUSE_BACKSCATTERING_WEIGHT_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_DIFFUSE_BACKSCATTERING_WEIGHT_MAP, _T("DiffuseBackscatteringWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_DIFFUSE_BACKSCATTERING_WEIGHT,
	p_ui, ROLLOUT_DIFFUSE, TYPE_TEXMAPBUTTON, IDC_UBER3_DIFFUSE_BACKSCATTERING_WEIGHT_T,
	PB_END,

	FRUBERMTLV3_DIFFUSE_SEPARATE_BACKSCATTERING_COLOR, _T("DiffuseSeparateBackScatteringColor"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE,
	p_ui, ROLLOUT_DIFFUSE, TYPE_SINGLECHEKBOX, IDC_UBER3_DIFFUSE_SEPARATE_BACKSCATTERING_COLOR,
	PB_END,

	FRUBERMTLV3_DIFFUSE_BACKSCATTERING_COLOR, _T("DiffuseBackScatteringColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(0.5f, 0.5f, 0.5f),
	p_ui, ROLLOUT_DIFFUSE, TYPE_COLORSWATCH, IDC_UBER3_DIFFUSE_BACKSCATTERING_COLOR,
	PB_END,

	FRUBERMTLV3_DIFFUSE_BACKSCATTERING_COLOR_MAP, _T("DiffuseBackScatteringColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_DIFFUSE_BACKSCATTERING_COLOR,
	p_ui, ROLLOUT_DIFFUSE, TYPE_TEXMAPBUTTON, IDC_UBER3_DIFFUSE_BACKSCATTERING_COLOR_T,
	PB_END,
	
// Reflection
	FRUBERMTLV3_REFLECTION_ENABLE, _T("ReflectionEnable"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE,
	p_ui, ROLLOUT_REFLECTION, TYPE_SINGLECHEKBOX, IDC_UBER3_REFLECTION_ENABLE,
	PB_END,

	FRUBERMTLV3_REFLECTION_COLOR, _T("ReflectionColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.0f, 1.0f, 1.0f),
	p_ui, ROLLOUT_REFLECTION, TYPE_COLORSWATCH, IDC_UBER3_REFLECTION_COLOR,
	PB_END,

	FRUBERMTLV3_REFLECTION_COLOR_MAP, _T("ReflectionColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_REFLECTION_COLOR,
	p_ui, ROLLOUT_REFLECTION, TYPE_TEXMAPBUTTON, IDC_UBER3_REFLECTION_COLOR_T,
	PB_END,

	FRUBERMTLV3_REFLECTION_WEIGHT, _T("ReflectionWeight"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.0f,
	p_range, 0.0f, 1.0f,
	p_ui, ROLLOUT_REFLECTION, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_REFLECTION_WEIGHT, IDC_UBER3_REFLECTION_WEIGHT_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_REFLECTION_WEIGHT_MAP, _T("ReflectionWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_REFLECTION_WEIGHT,
	p_ui, ROLLOUT_REFLECTION, TYPE_TEXMAPBUTTON, IDC_UBER3_REFLECTION_WEIGHT_T,
	PB_END,

	FRUBERMTLV3_REFLECTION_ROUGHNESS, _T("ReflectionRoughness"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.25f,
	p_range, 0.0f, 1.0f,
	p_ui, ROLLOUT_REFLECTION, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_REFLECTION_ROUGHNESS, IDC_UBER3_REFLECTION_ROUGHNESS_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_REFLECTION_ROUGHNESS_MAP, _T("ReflectionRoughnessTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_REFLECTION_ROUGHNESS,
	p_ui, ROLLOUT_REFLECTION, TYPE_TEXMAPBUTTON, IDC_UBER3_REFLECTION_ROUGHNESS_T,
	PB_END,

	FRUBERMTLV3_REFLECTION_ANISOTROPY, _T("ReflectionAnisotropy"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.0f,
	p_range, -1.0f, 1.0f,
	p_ui, ROLLOUT_REFLECTION, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_REFLECTION_ANISOTROPY, IDC_UBER3_REFLECTION_ANISOTROPY_S, SPIN_AUTOSCALE,
	PB_END,
		
	FRUBERMTLV3_REFLECTION_ANISOTROPY_MAP, _T("ReflectionAnisotropyTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_REFLECTION_ANISOTROPY,
	p_ui, ROLLOUT_REFLECTION, TYPE_TEXMAPBUTTON, IDC_UBER3_REFLECTION_ANISOTROPY_T,
	PB_END,

	FRUBERMTLV3_REFLECTION_ANISOTROPY_ROTATION, _T("ReflectionAnisotropyRotation"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.0f,
	p_range, -1.0f, 1.0f,
	p_ui, ROLLOUT_REFLECTION, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_REFLECTION_ANISOTROPY_ROTATION,
		IDC_UBER3_REFLECTION_ANISOTROPY_ROTATION_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_REFLECTION_ANISOTROPY_ROTATION_MAP, _T("ReflectionAnisotropyRotationTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_REFLECTION_ANISOTROPY_ROTATION,
	p_ui, ROLLOUT_REFLECTION, TYPE_TEXMAPBUTTON, IDC_UBER3_REFLECTION_ANISOTROPY_ROTATION_T,
	PB_END,

	FRUBERMTLV3_REFLECTION_MODE, _T("ReflectionMode"), TYPE_INT, P_ANIMATABLE, 0,
	p_default, RPRX_UBER_MATERIAL_REFLECTION_MODE_PBR,
	p_ui, ROLLOUT_REFLECTION, TYPE_INT_COMBOBOX, IDC_UBER3_REFLECTION_MODE, 2, IDS_IOR, IDS_METALNESS,
	p_vals, RPRX_UBER_MATERIAL_REFLECTION_MODE_PBR, RPRX_UBER_MATERIAL_REFLECTION_MODE_METALNESS, PB_END,

	FRUBERMTLV3_REFLECTION_IOR, _T("ReflectionIor"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.5f,
	p_range, 0.0f, 10.0f,
	p_ui, ROLLOUT_REFLECTION, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_REFLECTION_IOR, IDC_UBER3_REFLECTION_IOR_S, SPIN_AUTOSCALE,
	PB_END,
	
	FRUBERMTLV3_REFLECTION_IOR_MAP, _T("ReflectionIorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_REFLECTION_IOR,
	p_ui, ROLLOUT_REFLECTION, TYPE_TEXMAPBUTTON, IDC_UBER3_REFLECTION_IOR_T,
	PB_END,

	FRUBERMTLV3_REFLECTION_METALNESS, _T("ReflectionMetalness"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.0f,
	p_range, 0.0f, 1.0f,
	p_ui, ROLLOUT_REFLECTION, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_REFLECTION_METALNESS, IDC_UBER3_REFLECTION_METALNESS_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_REFLECTION_METALNESS_MAP, _T("ReflectionMetalnessTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_REFLECTION_METALNESS,
	p_ui, ROLLOUT_REFLECTION, TYPE_TEXMAPBUTTON, IDC_UBER3_REFLECTION_METALNESS_T,
	PB_END,

	FRUBERMTLV3_REFLECTION_USE_SHADER_NORMAL, _T("ReflectionUseShaderNormal"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE,
	p_ui, ROLLOUT_REFLECTION, TYPE_SINGLECHEKBOX, IDC_UBER3_REFLECTION_USE_SHADER_NORMAL,
	PB_END,

	FRUBERMTLV3_REFLECTION_NORMAL_MAP, _T("ReflectionNormalTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_REFLECTION_NORMAL,
	p_ui, ROLLOUT_REFLECTION, TYPE_TEXMAPBUTTON, IDC_UBER3_REFLECTION_NORMAL_T,
	PB_END,

// Refraction
	FRUBERMTLV3_REFRACTION_ENABLE, _T("RefractionEnable"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE,
	p_ui, ROLLOUT_REFRACTION, TYPE_SINGLECHEKBOX, IDC_UBER3_REFRACTION_ENABLE,
	PB_END,

	FRUBERMTLV3_REFRACTION_COLOR, _T("RefractionColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.0f, 1.0f, 1.0f),
	p_ui, ROLLOUT_REFRACTION, TYPE_COLORSWATCH, IDC_UBER3_REFRACTION_COLOR,
	PB_END,

	FRUBERMTLV3_REFRACTION_COLOR_MAP, _T("RefractionColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_REFRACTION_COLOR,
	p_ui, ROLLOUT_REFRACTION, TYPE_TEXMAPBUTTON, IDC_UBER3_REFRACTION_COLOR_T,
	PB_END,

	FRUBERMTLV3_REFRACTION_WEIGHT, _T("RefractionWeight"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.0f,
	p_range, 0.0f, 1.0f,
	p_ui, ROLLOUT_REFRACTION, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_REFRACTION_WEIGHT, IDC_UBER3_REFRACTION_WEIGHT_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_REFRACTION_WEIGHT_MAP, _T("RefractionWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_REFRACTION_WEIGHT,
	p_ui, ROLLOUT_REFRACTION, TYPE_TEXMAPBUTTON, IDC_UBER3_REFRACTION_WEIGHT_T,
	PB_END,

	FRUBERMTLV3_REFRACTION_ROUGHNESS, _T("RefractionRoughness"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.0f,
	p_range, 0.0f, 1.0f,
	p_ui, ROLLOUT_REFRACTION, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_REFRACTION_ROUGHNESS, IDC_UBER3_REFRACTION_ROUGHNESS_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_REFRACTION_ROUGHNESS_MAP, _T("RefractionRoughnessTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_REFRACTION_ROUGHNESS,
	p_ui, ROLLOUT_REFRACTION, TYPE_TEXMAPBUTTON, IDC_UBER3_REFRACTION_ROUGHNESS_T,
	PB_END,

	FRUBERMTLV3_REFRACTION_IOR, _T("RefractionIor"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.5f,
	p_range, 0.0f, 10.0f,
	p_ui, ROLLOUT_REFRACTION, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_REFRACTION_IOR, IDC_UBER3_REFRACTION_IOR_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_REFRACTION_IOR_MAP, _T("RefractionIorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_REFRACTION_IOR,
	p_ui, ROLLOUT_REFRACTION, TYPE_TEXMAPBUTTON, IDC_UBER3_REFRACTION_IOR_T,
	PB_END,

	FRUBERMTLV3_REFRACTION_THIN_SURFACE, _T("RefractionThinSurface"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE,
	p_ui, ROLLOUT_REFRACTION, TYPE_SINGLECHEKBOX, IDC_UBER3_REFRACTION_THIN_SURFACE,
	PB_END,

	FRUBERMTLV3_REFRACTION_ABSORPTION_DISTANCE, _T("RefractionAbsorptionDistance"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.0f,
	p_range, 0.0f, 10.0f,
	p_ui, ROLLOUT_REFRACTION, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_REFRACTION_ABSORPTION_DISTANCE,
		IDC_UBER3_REFRACTION_ABSORPTION_DISTANCE_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_REFRACTION_ABSORPTION_DISTANCE_MAP, _T("RefractionAbsorptionDistanceTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_REFRACTION_ABSORPTION_DISTANCE,
	p_ui, ROLLOUT_REFRACTION, TYPE_TEXMAPBUTTON, IDC_UBER3_REFRACTION_ABSORPTION_DISTANCE_T,
	PB_END,

	FRUBERMTLV3_REFRACTION_ALLOW_CAUSTICS, _T("RefractionAllowCaustics"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE,
	p_ui, ROLLOUT_REFRACTION, TYPE_SINGLECHEKBOX, IDC_UBER3_REFRACTION_ALLOW_CAUSTICS,
	PB_END,


// Coating
	FRUBERMTLV3_COATING_ENABLE, _T("CoatingEnable"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE,
	p_ui, ROLLOUT_COATING, TYPE_SINGLECHEKBOX, IDC_UBER3_COATING_ENABLE,
	PB_END,

	FRUBERMTLV3_COATING_COLOR, _T("CoatingColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.0f, 1.0f, 1.0f),
	p_ui, ROLLOUT_COATING, TYPE_COLORSWATCH, IDC_UBER3_COATING_COLOR,
	PB_END,

	FRUBERMTLV3_COATING_COLOR_MAP, _T("CoatingColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_COATING_COLOR,
	p_ui, ROLLOUT_COATING, TYPE_TEXMAPBUTTON, IDC_UBER3_COATING_COLOR_T,
	PB_END,

	FRUBERMTLV3_COATING_WEIGHT, _T("CoatingWeight"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.0f,
	p_range, 0.0f, 1.0f,
	p_ui, ROLLOUT_COATING, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_COATING_WEIGHT, IDC_UBER3_COATING_WEIGHT_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_COATING_WEIGHT_MAP, _T("CoatingWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_COATING_WEIGHT,
	p_ui, ROLLOUT_COATING, TYPE_TEXMAPBUTTON, IDC_UBER3_COATING_WEIGHT_T,
	PB_END,

	FRUBERMTLV3_COATING_ROUGHNESS, _T("CoatingRoughness"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.01f,
	p_range, 0.0f, 1.0f,
	p_ui, ROLLOUT_COATING, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_COATING_ROUGHNESS, IDC_UBER3_COATING_ROUGHNESS_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_COATING_ROUGHNESS_MAP, _T("CoatingRoughnessTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_COATING_ROUGHNESS,
	p_ui, ROLLOUT_COATING, TYPE_TEXMAPBUTTON, IDC_UBER3_COATING_ROUGHNESS_T,
	PB_END,

	FRUBERMTLV3_COATING_IOR, _T("CoatingIor"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.5f,
	p_range, 0.0f, 10.0f,
	p_ui, ROLLOUT_COATING, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_COATING_IOR, IDC_UBER3_COATING_IOR_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_COATING_IOR_MAP, _T("CoatingIorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_COATING_IOR,
	p_ui, ROLLOUT_COATING, TYPE_TEXMAPBUTTON, IDC_UBER3_COATING_IOR_T,
	PB_END,

	FRUBERMTLV3_COATING_USE_SHADER_NORMAL, _T("CoatingUseShaderNormal"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE,
	p_ui, ROLLOUT_COATING, TYPE_SINGLECHEKBOX, IDC_UBER3_COATING_USE_SHADER_NORMAL,
	PB_END,

	FRUBERMTLV3_COATING_NORMAL_MAP, _T("CoatingNormalTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_COATING_NORMAL,
	p_ui, ROLLOUT_COATING, TYPE_TEXMAPBUTTON, IDC_UBER3_COATING_NORMAL_T,
	PB_END,

	FRUBERMTLV3_COATING_THICKNESS, _T("CoatingThickness"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.0f,
	p_range, 0.0f, 10.0f,
	p_ui, ROLLOUT_COATING, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_COATING_THICKNESS, IDC_UBER3_COATING_THICKNESS_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_COATING_THICKNESS_MAP, _T("CoatingThicknessTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_COATING_THICKNESS,
	p_ui, ROLLOUT_COATING, TYPE_TEXMAPBUTTON, IDC_UBER3_COATING_THICKNESS_T,
	PB_END,

	FRUBERMTLV3_COATING_TRANSMISSION_COLOR, _T("CoatingTransmissionColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.0f, 1.0f, 1.0f),
	p_ui, ROLLOUT_COATING, TYPE_COLORSWATCH, IDC_UBER3_COATING_TRANSMISSION_COLOR,
	PB_END,

	FRUBERMTLV3_COATING_TRANSMISSION_COLOR_MAP, _T("CoatingTransmissionColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_COATING_TRANSMISSION_COLOR,
	p_ui, ROLLOUT_COATING, TYPE_TEXMAPBUTTON, IDC_UBER3_COATING_TRANSMISSION_COLOR_T,
	PB_END,

// Emissive
	FRUBERMTLV3_EMISSIVE_ENABLE, _T("EmissiveEnable"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE,
	p_ui, ROLLOUT_EMISSIVE, TYPE_SINGLECHEKBOX, IDC_UBER3_EMISSIVE_ENABLE,
	PB_END,

	FRUBERMTLV3_EMISSIVE_COLOR, _T("EmissiveColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.0f, 1.0f, 1.0f),
	p_ui, ROLLOUT_EMISSIVE, TYPE_COLORSWATCH, IDC_UBER3_EMISSIVE_COLOR,
	PB_END,

	FRUBERMTLV3_EMISSIVE_COLOR_MAP, _T("EmissiveColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_EMISSIVE_COLOR,
	p_ui, ROLLOUT_EMISSIVE, TYPE_TEXMAPBUTTON, IDC_UBER3_EMISSIVE_COLOR_T,
	PB_END,

	FRUBERMTLV3_EMISSIVE_WEIGHT, _T("EmissiveWeight"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.0f,
	p_range, 0.0f, 1.0f,
	p_ui, ROLLOUT_EMISSIVE, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_EMISSIVE_WEIGHT, IDC_UBER3_EMISSIVE_WEIGHT_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_EMISSIVE_WEIGHT_MAP, _T("EmissiveWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_EMISSIVE_WEIGHT,
	p_ui, ROLLOUT_EMISSIVE, TYPE_TEXMAPBUTTON, IDC_UBER3_EMISSIVE_WEIGHT_T,
	PB_END,

	FRUBERMTLV3_EMISSIVE_INTENSITY, _T("EmissiveIntensity"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.0f,
	p_range, 0.0f, FLT_MAX,
	p_ui, ROLLOUT_EMISSIVE, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_EMISSIVE_INTENSITY, IDC_UBER3_EMISSIVE_INTENSITY_S, SPIN_AUTOSCALE,
	PB_END,
		
	FRUBERMTLV3_EMISSIVE_DOUBLE_SIDED, _T("EmissiveDoubleSided"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE,
	p_ui, ROLLOUT_EMISSIVE, TYPE_SINGLECHEKBOX, IDC_UBER3_EMISSIVE_DOUBLE_SIDED,
	PB_END,

// Subsurface scattering
	FRUBERMTLV3_SSS_ENABLE, _T("SssEnable"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE,
	p_ui, ROLLOUT_SSS, TYPE_SINGLECHEKBOX, IDC_UBER3_SSS_ENABLE,
	PB_END,

	FRUBERMTLV3_SSS_WEIGHT, _T("SssWeight"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.0f,
	p_range, 0.0f, 1.0f,
	p_ui, ROLLOUT_SSS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_SSS_WEIGHT, IDC_UBER3_SSS_WEIGHT_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_SSS_WEIGHT_MAP, _T("SssWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_SSS_WEIGHT,
	p_ui, ROLLOUT_SSS, TYPE_TEXMAPBUTTON, IDC_UBER3_SSS_WEIGHT_T,
	PB_END,

	FRUBERMTLV3_SSS_USE_DIFFUSE_COLOR, _T("SssUseDiffuseColor"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE,
	p_ui, ROLLOUT_SSS, TYPE_SINGLECHEKBOX, IDC_UBER3_SSS_USE_DIFFUSE_COLOR,
	PB_END,

	FRUBERMTLV3_SSS_COLOR, _T("SssColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(0.436f, 0.227f, 0.131f), // skinlike
	p_ui, ROLLOUT_SSS, TYPE_COLORSWATCH, IDC_UBER3_SSS_COLOR,
	PB_END,

	FRUBERMTLV3_SSS_COLOR_MAP, _T("SssColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_SSS_COLOR,
	p_ui, ROLLOUT_SSS, TYPE_TEXMAPBUTTON, IDC_UBER3_SSS_COLOR_T,
	PB_END,

	FRUBERMTLV3_SSS_RADIUS, _T("SssRadius"), TYPE_POINT3, P_ANIMATABLE, 0,
	p_default, Point3(3.67f, 1.37f, 0.68f),
	p_range, 0.0f, 5.0f,
	p_ui, ROLLOUT_SSS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_SSS_RADIUS_X, IDC_UBER3_SSS_RADIUS_X_S,
	IDC_UBER3_SSS_RADIUS_Y, IDC_UBER3_SSS_RADIUS_Y_S, IDC_UBER3_SSS_RADIUS_Z, IDC_UBER3_SSS_RADIUS_Z_S,
	SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_SSS_RADIUS_MAP, _T("SssRadiusTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_SSS_RADIUS,
	p_ui, ROLLOUT_SSS, TYPE_TEXMAPBUTTON, IDC_UBER3_SSS_RADIUS_T,
	PB_END,

	FRUBERMTLV3_SSS_DIRECTION, _T("SssDirection"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.0f,
	p_range, -1.0f, 1.0f,
	p_ui, ROLLOUT_SSS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_SSS_DIRECTION, IDC_UBER3_SSS_DIRECTION_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_SSS_DIRECTION_MAP, _T("SssDirectionTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_SSS_DIRECTION,
	p_ui, ROLLOUT_SSS, TYPE_TEXMAPBUTTON, IDC_UBER3_SSS_DIRECTION_T,
	PB_END,

	FRUBERMTLV3_SSS_MULTIPLE_SCATTERING, _T("SssMultipleScattering"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE,
	p_ui, ROLLOUT_SSS, TYPE_SINGLECHEKBOX, IDC_UBER3_SSS_MULTIPLE_SCATTERING,
	PB_END,

// Normal
	FRUBERMTLV3_NORMAL_ENABLE, _T("NormalEnable"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE,
	p_ui, ROLLOUT_NORMAL, TYPE_SINGLECHEKBOX, IDC_UBER3_NORMAL_ENABLE,
	PB_END,

	FRUBERMTLV3_NORMAL_MAP, _T("NormalTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_NORMAL,
	p_ui, ROLLOUT_NORMAL, TYPE_TEXMAPBUTTON, IDC_UBER3_NORMAL_T,
	PB_END,

// Transparency
	FRUBERMTLV3_TRANSPARENCY_ENABLE, _T("TransparencyEnable"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE,
	p_ui, ROLLOUT_TRANSPARENCY, TYPE_SINGLECHEKBOX, IDC_UBER3_TRANSPARENCY_ENABLE,
	PB_END,

	FRUBERMTLV3_TRANSPARENCY, _T("Transparency"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.0f,
	p_range, 0.0f, 1.0f,
	p_ui, ROLLOUT_TRANSPARENCY, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_TRANSPARENCY, IDC_UBER3_TRANSPARENCY_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_TRANSPARENCY_MAP, _T("TransparencyTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_TRANSPARENCY,
	p_ui, ROLLOUT_TRANSPARENCY, TYPE_TEXMAPBUTTON, IDC_UBER3_TRANSPARENCY_T,
	PB_END,

// Displacement
	FRUBERMTLV3_DISPLACEMENT_ENABLE, _T("DisplacementEnable"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE,
	p_ui, ROLLOUT_DISPLACEMENT, TYPE_SINGLECHEKBOX, IDC_UBER3_DISPLACEMENT_ENABLE,
	PB_END,
	
	FRUBERMTLV3_DISPLACEMENT_MAP, _T("DisplacementTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV3_MAP_DISPLACEMENT,
	p_ui, ROLLOUT_DISPLACEMENT, TYPE_TEXMAPBUTTON, IDC_UBER3_DISPLACEMENT_T,
	PB_END,

	FRUBERMTLV3_DISPLACEMENT_MIN, _T("DisplacementMin"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.0f,
	p_range, -10.0f, 10.0f,
	p_ui, ROLLOUT_DISPLACEMENT, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_DISPLACEMENT_MIN, IDC_UBER3_DISPLACEMENT_MIN_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_DISPLACEMENT_MAX, _T("DisplacementMax"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.0f,
	p_range, -10.0f, 10.0f,
	p_ui, ROLLOUT_DISPLACEMENT, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_DISPLACEMENT_MAX, IDC_UBER3_DISPLACEMENT_MAX_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_DISPLACEMENT_SUBDIV_TYPE, _T("DisplacementSubdivType"), TYPE_INT, P_ANIMATABLE, 0,
	p_default, RprSubdivType::Level,
	p_ui, ROLLOUT_DISPLACEMENT, TYPE_INT_COMBOBOX, IDC_UBER3_DISPLACEMENT_SUBDIV_TYPE, RprSubdivTypeMax, IDS_SUBDIV_ADAPTIVE, IDS_SUBDIV_LEVEL,
	p_vals, RprSubdivType::Adaptive, RprSubdivType::Level, PB_END,

	FRUBERMTLV3_DISPLACEMENT_SUBDIV, _T("DisplacementSubdiv"), TYPE_INT, P_ANIMATABLE, 0,
	p_default, 1,
	p_range, 1, 8,
	p_ui, ROLLOUT_DISPLACEMENT, TYPE_SPINNER, EDITTYPE_INT, IDC_UBER3_DISPLACEMENT_SUBDIV, IDC_UBER3_DISPLACEMENT_SUBDIV_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_DISPLACEMENT_CREASE_WEIGHT, _T("DisplacementCreaseWeight"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.0f,
	p_range, 0.0, FLT_MAX,
	p_ui, ROLLOUT_DISPLACEMENT, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER3_DISPLACEMENT_CREASE_WEIGHT,
		IDC_UBER3_DISPLACEMENT_CREASE_WEIGHT_S, SPIN_AUTOSCALE,
	PB_END,

	FRUBERMTLV3_DISPLACEMENT_BOUNDARY_INTEROP_TYPE, _T("DisplacementSubdivBoundaryInteropType"), TYPE_INT, P_ANIMATABLE, 0,
	p_default, RPR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_ONLY,
	p_ui, ROLLOUT_DISPLACEMENT, TYPE_INT_COMBOBOX, IDC_UBER3_DISPLACEMENT_BOUNDARY_INTEROP_TYPE, 2,
		IDS_SUBDIV_BOUNDARY_INTEROP_EDGE, IDS_SUBDIV_BOUNDARY_INTEROP_EDGE_AND_CORNER,
	p_vals, RPR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_ONLY, RPR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_AND_CORNER, PB_END,
		
	PB_END
);

std::map<int, std::pair<ParamID, MCHAR*>> FRMTLCLASSNAME(UberMtlv3)::TEXMAP_MAPPING =
{
// Diffuse
	{ FRUBERMTLV3_MAP_DIFFUSE_COLOR,{ FRUBERMTLV3_DIFFUSE_COLOR_MAP, _T("Diffuse Color") } },
	{ FRUBERMTLV3_MAP_DIFFUSE_WEIGHT,{ FRUBERMTLV3_DIFFUSE_WEIGHT_MAP, _T("Diffuse Weight") } },
	{ FRUBERMTLV3_MAP_DIFFUSE_ROUGHNESS,{ FRUBERMTLV3_DIFFUSE_ROUGHNESS_MAP, _T("Diffuse Roughness") } },
	{ FRUBERMTLV3_MAP_DIFFUSE_NORMAL,{ FRUBERMTLV3_DIFFUSE_NORMAL_MAP, _T("Diffuse Normal") } },
	{ FRUBERMTLV3_MAP_DIFFUSE_BACKSCATTERING_WEIGHT,{ FRUBERMTLV3_DIFFUSE_BACKSCATTERING_WEIGHT_MAP, _T("Backscattering Weight") } },
	{ FRUBERMTLV3_MAP_DIFFUSE_BACKSCATTERING_COLOR, { FRUBERMTLV3_DIFFUSE_BACKSCATTERING_COLOR_MAP, _T("Backscattering Color") } },
	
// Reflection
	{ FRUBERMTLV3_MAP_REFLECTION_COLOR,{ FRUBERMTLV3_REFLECTION_COLOR_MAP, _T("Reflection Color") } },
	{ FRUBERMTLV3_MAP_REFLECTION_WEIGHT,{ FRUBERMTLV3_REFLECTION_WEIGHT_MAP, _T("Reflection Weight") } },
	{ FRUBERMTLV3_MAP_REFLECTION_ROUGHNESS,{ FRUBERMTLV3_REFLECTION_ROUGHNESS_MAP, _T("Reflection Roughness") } },
	{ FRUBERMTLV3_MAP_REFLECTION_ANISOTROPY,{ FRUBERMTLV3_REFLECTION_ANISOTROPY_MAP, _T("Reflection Anisotropy") } },
	{ FRUBERMTLV3_MAP_REFLECTION_ANISOTROPY_ROTATION,{ FRUBERMTLV3_REFLECTION_ANISOTROPY_ROTATION_MAP, _T("Reflection Anisotropy Rotation") } },
	{ FRUBERMTLV3_MAP_REFLECTION_IOR,{ FRUBERMTLV3_REFLECTION_IOR_MAP, _T("Reflection IOR") } },
	{ FRUBERMTLV3_MAP_REFLECTION_METALNESS,{ FRUBERMTLV3_REFLECTION_METALNESS_MAP, _T("Reflection Metalness") } },
	{ FRUBERMTLV3_MAP_REFLECTION_NORMAL,{ FRUBERMTLV3_REFLECTION_NORMAL_MAP, _T("Reflection Normal") } },

// Refraction
	{ FRUBERMTLV3_MAP_REFRACTION_COLOR,{ FRUBERMTLV3_REFRACTION_COLOR_MAP, _T("Refraction Color") } },
	{ FRUBERMTLV3_MAP_REFRACTION_WEIGHT,{ FRUBERMTLV3_REFRACTION_WEIGHT_MAP, _T("Refraction Weight") } },
	{ FRUBERMTLV3_MAP_REFRACTION_ROUGHNESS,{ FRUBERMTLV3_REFRACTION_ROUGHNESS_MAP, _T("Refraction Roughness") } },
	{ FRUBERMTLV3_MAP_REFRACTION_IOR,{ FRUBERMTLV3_REFRACTION_IOR_MAP, _T("Refraction IOR") } },
	{ FRUBERMTLV3_MAP_REFRACTION_ABSORPTION_DISTANCE,{ FRUBERMTLV3_REFRACTION_ABSORPTION_DISTANCE_MAP, _T("Refraction Absorption Distance") } },

// Coating
	{ FRUBERMTLV3_MAP_COATING_COLOR,{ FRUBERMTLV3_COATING_COLOR_MAP, _T("Coating Color") } },
	{ FRUBERMTLV3_MAP_COATING_WEIGHT,{ FRUBERMTLV3_COATING_WEIGHT_MAP, _T("Coating Weight") } },
	{ FRUBERMTLV3_MAP_COATING_ROUGHNESS,{ FRUBERMTLV3_COATING_ROUGHNESS_MAP, _T("Coating Roughness") } },
	{ FRUBERMTLV3_MAP_COATING_IOR,{ FRUBERMTLV3_COATING_IOR_MAP, _T("Coating IOR") } },
	{ FRUBERMTLV3_MAP_COATING_NORMAL,{ FRUBERMTLV3_COATING_NORMAL_MAP, _T("Coating Normal") } },
	{ FRUBERMTLV3_MAP_COATING_THICKNESS,{ FRUBERMTLV3_COATING_THICKNESS_MAP, _T("Coating Thickness") } },
	{ FRUBERMTLV3_MAP_COATING_TRANSMISSION_COLOR,{ FRUBERMTLV3_COATING_TRANSMISSION_COLOR_MAP, _T("Coating Transmission Color") } },

// Emissive
	{ FRUBERMTLV3_MAP_EMISSIVE_COLOR,{ FRUBERMTLV3_EMISSIVE_COLOR_MAP, _T("Emissive Color") } },
	{ FRUBERMTLV3_MAP_EMISSIVE_WEIGHT,{ FRUBERMTLV3_EMISSIVE_WEIGHT_MAP, _T("Emissive Weight") } },

// Subsurface scattering
	{ FRUBERMTLV3_MAP_SSS_WEIGHT,{ FRUBERMTLV3_SSS_WEIGHT_MAP, _T("SSS Weight") } },
	{ FRUBERMTLV3_MAP_SSS_COLOR,{ FRUBERMTLV3_SSS_COLOR_MAP, _T("SSS Color") } },
	{ FRUBERMTLV3_MAP_SSS_RADIUS,{ FRUBERMTLV3_SSS_RADIUS_MAP, _T("SSS Radius") } },
	{ FRUBERMTLV3_MAP_SSS_DIRECTION,{ FRUBERMTLV3_SSS_DIRECTION_MAP, _T("SSS Direction") } },

// Normal
	{ FRUBERMTLV3_MAP_NORMAL,{ FRUBERMTLV3_NORMAL_MAP, _T("Normal") } },
	
// Transparency
	{ FRUBERMTLV3_MAP_TRANSPARENCY,{ FRUBERMTLV3_TRANSPARENCY_MAP, _T("Transparency") } },

// Displacement
	{ FRUBERMTLV3_MAP_DISPLACEMENT,{ FRUBERMTLV3_DISPLACEMENT_MAP, _T("Displacement") } },
};

FRMTLCLASSNAME(UberMtlv3)::~FRMTLCLASSNAME(UberMtlv3)()
{
}

Color FRMTLCLASSNAME(UberMtlv3)::GetDiffuse(int mtlNum, BOOL backFace)
{
	return GetFromPb<Color>(pblock, FRUBERMTLV3_DIFFUSE_COLOR);
}

frw::Shader FRMTLCLASSNAME(UberMtlv3)::getVolumeShader(const TimeValue t, MaterialParser& mtlParser, INode* node)
{
	return frw::Shader();
}

bool IsEnabled(int paramId, IParamBlock2* pb)
{
	return GetFromPb<BOOL>(pb, paramId) != 0;
}

template <typename T>
void SetRprParam(int rprxId, int paramId, int mapId, int mapFlags, IParamBlock2* pb, MaterialParser* mp, frw::Shader& shader)
{
	T data = GetFromPb<T>(pb, paramId);
	Texmap* map = GetFromPb<Texmap*>(pb, mapId);
	frw::Value value(data);

	if (map != nullptr)
	{
		value = mp->createMap(map, mapFlags);
	}

	shader.xSetValue(rprxId, value);
}

void SetRprMap(int rprxId, int mapId, int mapFlags, IParamBlock2* pb, MaterialParser* mp, frw::Shader& shader)
{
	Texmap* map = GetFromPb<Texmap*>(pb, mapId);

	if (map != nullptr)
	{
		frw::Value value = mp->createMap(map, mapFlags);
		shader.xSetValue(rprxId, value);
	}
}

void SetEmissiveColor(int rprxId, int paramId, int mapId, int intensityId, IParamBlock2* pb, MaterialParser* mp, frw::Shader& shader)
{
	Color data = GetFromPb<Color>(pb, paramId);
	Texmap* map = GetFromPb<Texmap*>(pb, mapId);
	frw::Value value(data);

	if (map != nullptr)
	{
		value = mp->createMap(map, MAP_FLAG_NOFLAGS);
	}

	float intensity = GetFromPb<float>(pb, intensityId);
	frw::Value intensityValue(intensity);

	value = mp->materialSystem.ValueMul(value, intensityValue);

	shader.xSetValue(rprxId, value);
}

void SetTransmissionColor(int rprxId, int paramId, int mapId, IParamBlock2* pb, MaterialParser* mp, frw::Shader& shader)
{
	Color data = GetFromPb<Color>(pb, paramId);
	Texmap* map = GetFromPb<Texmap*>(pb, mapId);
	frw::Value value(data);

	if (map != nullptr)
	{
		value = mp->createMap(map, MAP_FLAG_NOFLAGS);
	}

	value = 1 - value;

	shader.xSetValue(rprxId, value);
}

frw::Shader FRMTLCLASSNAME(UberMtlv3)::getShader(const TimeValue t, MaterialParser& mtlParser, INode* node)
{
	frw::Scope& scope = mtlParser.GetScope();
	frw::Shader shader(scope.GetContext(), scope.GetContextEx(), RPRX_MATERIAL_UBER);

	auto isEnabled = std::bind(IsEnabled, std::placeholders::_1, pblock);

	auto setColor = std::bind(SetRprParam<Color>, std::placeholders::_1, std::placeholders::_2,
		std::placeholders::_3, std::placeholders::_4, pblock, &mtlParser, shader);

	auto setFloat = std::bind(SetRprParam<float>, std::placeholders::_1, std::placeholders::_2,
		std::placeholders::_3, std::placeholders::_4, pblock, &mtlParser, shader);

	auto setPoint3 = std::bind(SetRprParam<Point3>, std::placeholders::_1, std::placeholders::_2,
		std::placeholders::_3, std::placeholders::_4, pblock, &mtlParser, shader);

	auto setMap = std::bind(SetRprMap, std::placeholders::_1, std::placeholders::_2,
		std::placeholders::_3, pblock, &mtlParser, shader);

// Diffuse
	shader.xSetValue(RPRX_UBER_MATERIAL_DIFFUSE_WEIGHT, 0.0f);

	if ( isEnabled(FRUBERMTLV3_DIFFUSE_ENABLE) )
	{
		setColor(RPRX_UBER_MATERIAL_DIFFUSE_COLOR, FRUBERMTLV3_DIFFUSE_COLOR, FRUBERMTLV3_DIFFUSE_COLOR_MAP, MAP_FLAG_NOFLAGS);
		setFloat(RPRX_UBER_MATERIAL_DIFFUSE_WEIGHT, FRUBERMTLV3_DIFFUSE_WEIGHT, FRUBERMTLV3_DIFFUSE_WEIGHT_MAP, MAP_FLAG_NOGAMMA);
		setFloat(RPRX_UBER_MATERIAL_DIFFUSE_ROUGHNESS, FRUBERMTLV3_DIFFUSE_ROUGHNESS, FRUBERMTLV3_DIFFUSE_ROUGHNESS_MAP, MAP_FLAG_NOGAMMA);

		if ( isEnabled(FRUBERMTLV3_DIFFUSE_USE_SHADER_NORMAL) )
		{
			if ( isEnabled(FRUBERMTLV3_NORMAL_ENABLE) )
			{
				setMap(RPRX_UBER_MATERIAL_DIFFUSE_NORMAL, FRUBERMTLV3_NORMAL_MAP, MAP_FLAG_NOGAMMA | MAP_FLAG_NORMALMAP);
			}
		}
		else
		{
			setMap(RPRX_UBER_MATERIAL_DIFFUSE_NORMAL, FRUBERMTLV3_DIFFUSE_NORMAL_MAP, MAP_FLAG_NOGAMMA | MAP_FLAG_NORMALMAP);
		}

		setFloat(RPRX_UBER_MATERIAL_BACKSCATTER_WEIGHT, FRUBERMTLV3_DIFFUSE_BACKSCATTERING_WEIGHT,
			FRUBERMTLV3_DIFFUSE_BACKSCATTERING_WEIGHT_MAP, MAP_FLAG_NOGAMMA);

		isEnabled(FRUBERMTLV3_DIFFUSE_SEPARATE_BACKSCATTERING_COLOR) ?
			setColor(RPRX_UBER_MATERIAL_BACKSCATTER_COLOR, FRUBERMTLV3_DIFFUSE_BACKSCATTERING_COLOR,
				FRUBERMTLV3_DIFFUSE_BACKSCATTERING_COLOR_MAP, MAP_FLAG_NOFLAGS) :
			setColor(RPRX_UBER_MATERIAL_BACKSCATTER_COLOR, FRUBERMTLV3_DIFFUSE_COLOR, FRUBERMTLV3_DIFFUSE_COLOR_MAP, MAP_FLAG_NOFLAGS);
	}

// Reflection
	shader.xSetValue(RPRX_UBER_MATERIAL_REFLECTION_WEIGHT, 0.0f);

	if ( isEnabled(FRUBERMTLV3_REFLECTION_ENABLE) )
	{
		setColor(RPRX_UBER_MATERIAL_REFLECTION_COLOR, FRUBERMTLV3_REFLECTION_COLOR, FRUBERMTLV3_REFLECTION_COLOR_MAP, MAP_FLAG_NOFLAGS);
		setFloat(RPRX_UBER_MATERIAL_REFLECTION_WEIGHT, FRUBERMTLV3_REFLECTION_WEIGHT, FRUBERMTLV3_REFLECTION_WEIGHT_MAP, MAP_FLAG_NOGAMMA);
		setFloat(RPRX_UBER_MATERIAL_REFLECTION_ROUGHNESS, FRUBERMTLV3_REFLECTION_ROUGHNESS, FRUBERMTLV3_REFLECTION_ROUGHNESS_MAP,
			MAP_FLAG_NOGAMMA);
		setFloat(RPRX_UBER_MATERIAL_REFLECTION_ANISOTROPY, FRUBERMTLV3_REFLECTION_ANISOTROPY, FRUBERMTLV3_REFLECTION_ANISOTROPY_MAP,
			MAP_FLAG_NOGAMMA);
		setFloat(RPRX_UBER_MATERIAL_REFLECTION_ANISOTROPY_ROTATION, FRUBERMTLV3_REFLECTION_ANISOTROPY_ROTATION,
			FRUBERMTLV3_REFLECTION_ANISOTROPY_ROTATION_MAP, MAP_FLAG_NOGAMMA);

		int reflectionMode = GetFromPb<int>(pblock, FRUBERMTLV3_REFLECTION_MODE);

		shader.xSetParameterU(RPRX_UBER_MATERIAL_REFLECTION_MODE, reflectionMode);

		if (RPRX_UBER_MATERIAL_REFLECTION_MODE_PBR == reflectionMode)
		{
			setFloat(RPRX_UBER_MATERIAL_REFLECTION_IOR, FRUBERMTLV3_REFLECTION_IOR, FRUBERMTLV3_REFLECTION_IOR_MAP, MAP_FLAG_NOGAMMA);
		}
		else if(RPRX_UBER_MATERIAL_REFLECTION_MODE_METALNESS == reflectionMode)
		{
			setFloat(RPRX_UBER_MATERIAL_REFLECTION_METALNESS, FRUBERMTLV3_REFLECTION_METALNESS, FRUBERMTLV3_REFLECTION_METALNESS_MAP,
				MAP_FLAG_NOGAMMA);
		}

		if ( isEnabled(FRUBERMTLV3_REFLECTION_USE_SHADER_NORMAL) )
		{
			if ( isEnabled(FRUBERMTLV3_NORMAL_ENABLE) )
			{
				setMap(RPRX_UBER_MATERIAL_REFLECTION_NORMAL, FRUBERMTLV3_NORMAL_MAP, MAP_FLAG_NOGAMMA | MAP_FLAG_NORMALMAP);
			}
		}
		else
		{
			setMap(RPRX_UBER_MATERIAL_REFLECTION_NORMAL, FRUBERMTLV3_REFLECTION_NORMAL_MAP, MAP_FLAG_NOGAMMA | MAP_FLAG_NORMALMAP);
		}
	}

// Refraction
	shader.xSetValue(RPRX_UBER_MATERIAL_REFRACTION_WEIGHT, 0.0f);

	if ( isEnabled(FRUBERMTLV3_REFRACTION_ENABLE) )
	{
		setColor(RPRX_UBER_MATERIAL_REFRACTION_COLOR, FRUBERMTLV3_REFRACTION_COLOR, FRUBERMTLV3_REFRACTION_COLOR_MAP, MAP_FLAG_NOFLAGS);
		setFloat(RPRX_UBER_MATERIAL_REFRACTION_WEIGHT, FRUBERMTLV3_REFRACTION_WEIGHT, FRUBERMTLV3_REFRACTION_WEIGHT_MAP, MAP_FLAG_NOGAMMA);
		setFloat(RPRX_UBER_MATERIAL_REFRACTION_ROUGHNESS, FRUBERMTLV3_REFRACTION_ROUGHNESS, FRUBERMTLV3_REFRACTION_ROUGHNESS_MAP,
			MAP_FLAG_NOGAMMA);
		setFloat(RPRX_UBER_MATERIAL_REFRACTION_IOR, FRUBERMTLV3_REFRACTION_IOR, FRUBERMTLV3_REFRACTION_IOR_MAP, MAP_FLAG_NOGAMMA);

		BOOL isThinSuraface = GetFromPb<BOOL>(pblock, FRUBERMTLV3_REFRACTION_THIN_SURFACE);
		shader.xSetParameterU(RPRX_UBER_MATERIAL_REFRACTION_THIN_SURFACE, isThinSuraface);

		setColor(RPRX_UBER_MATERIAL_REFRACTION_ABSORPTION_COLOR, FRUBERMTLV3_REFRACTION_COLOR, FRUBERMTLV3_REFRACTION_COLOR_MAP,
			MAP_FLAG_NOFLAGS);
		setFloat(RPRX_UBER_MATERIAL_REFRACTION_ABSORPTION_DISTANCE, FRUBERMTLV3_REFRACTION_ABSORPTION_DISTANCE,
			FRUBERMTLV3_REFRACTION_ABSORPTION_DISTANCE_MAP, MAP_FLAG_NOGAMMA);
		
		BOOL hasCaustics = GetFromPb<BOOL>(pblock, FRUBERMTLV3_REFRACTION_ALLOW_CAUSTICS);
		shader.xSetParameterU(RPRX_UBER_MATERIAL_REFRACTION_CAUSTICS, hasCaustics);
	}

// Coating
	shader.xSetValue(RPRX_UBER_MATERIAL_COATING_WEIGHT, 0.0f);

	if ( isEnabled(FRUBERMTLV3_COATING_ENABLE) )
	{
		setColor(RPRX_UBER_MATERIAL_COATING_COLOR, FRUBERMTLV3_COATING_COLOR, FRUBERMTLV3_COATING_COLOR_MAP, MAP_FLAG_NOFLAGS);
		setFloat(RPRX_UBER_MATERIAL_COATING_WEIGHT, FRUBERMTLV3_COATING_WEIGHT, FRUBERMTLV3_COATING_WEIGHT_MAP, MAP_FLAG_NOGAMMA);
		setFloat(RPRX_UBER_MATERIAL_COATING_ROUGHNESS, FRUBERMTLV3_COATING_ROUGHNESS, FRUBERMTLV3_COATING_ROUGHNESS_MAP, MAP_FLAG_NOGAMMA);
		setFloat(RPRX_UBER_MATERIAL_COATING_IOR, FRUBERMTLV3_COATING_IOR, FRUBERMTLV3_COATING_IOR_MAP, MAP_FLAG_NOGAMMA);

		if ( isEnabled(FRUBERMTLV3_COATING_USE_SHADER_NORMAL) )
		{
			if ( isEnabled(FRUBERMTLV3_NORMAL_ENABLE) )
			{
				setMap(RPRX_UBER_MATERIAL_COATING_NORMAL, FRUBERMTLV3_NORMAL_MAP, MAP_FLAG_NOGAMMA | MAP_FLAG_NORMALMAP);
			}
		}
		else
		{
			setMap(RPRX_UBER_MATERIAL_COATING_NORMAL, FRUBERMTLV3_COATING_NORMAL_MAP, MAP_FLAG_NOGAMMA | MAP_FLAG_NORMALMAP);
		}

		setFloat(RPRX_UBER_MATERIAL_COATING_THICKNESS, FRUBERMTLV3_COATING_THICKNESS, FRUBERMTLV3_COATING_THICKNESS_MAP, MAP_FLAG_NOGAMMA);

		SetTransmissionColor(RPRX_UBER_MATERIAL_COATING_TRANSMISSION_COLOR, FRUBERMTLV3_COATING_TRANSMISSION_COLOR,
			FRUBERMTLV3_COATING_TRANSMISSION_COLOR_MAP, pblock, &mtlParser, shader);
	}

// Emissive
	shader.xSetValue(RPRX_UBER_MATERIAL_EMISSION_WEIGHT, 0.0f);

	if ( isEnabled(FRUBERMTLV3_EMISSIVE_ENABLE) )
	{
		setFloat(RPRX_UBER_MATERIAL_EMISSION_WEIGHT, FRUBERMTLV3_EMISSIVE_WEIGHT, FRUBERMTLV3_EMISSIVE_WEIGHT_MAP, MAP_FLAG_NOGAMMA);

		SetEmissiveColor(RPRX_UBER_MATERIAL_EMISSION_COLOR, FRUBERMTLV3_EMISSIVE_COLOR, FRUBERMTLV3_EMISSIVE_COLOR_MAP,
			FRUBERMTLV3_EMISSIVE_INTENSITY, pblock, &mtlParser, shader);
		
		BOOL isDoubleSided = GetFromPb<BOOL>(pblock, FRUBERMTLV3_EMISSIVE_DOUBLE_SIDED);
		rpr_uint emissiveMode = isDoubleSided ? RPRX_UBER_MATERIAL_EMISSION_MODE_DOUBLESIDED : RPRX_UBER_MATERIAL_EMISSION_MODE_SINGLESIDED;
		shader.xSetParameterU(RPRX_UBER_MATERIAL_EMISSION_MODE, emissiveMode);
	}

// Subsurface scattering
	shader.xSetValue(RPRX_UBER_MATERIAL_SSS_WEIGHT, 0.0f);

	if ( isEnabled(FRUBERMTLV3_SSS_ENABLE) )
	{
		setFloat(RPRX_UBER_MATERIAL_SSS_WEIGHT, FRUBERMTLV3_SSS_WEIGHT, FRUBERMTLV3_SSS_WEIGHT_MAP, MAP_FLAG_NOGAMMA);

		if ( isEnabled(FRUBERMTLV3_SSS_USE_DIFFUSE_COLOR) )
		{
			setColor(RPRX_UBER_MATERIAL_SSS_SCATTER_COLOR, FRUBERMTLV3_DIFFUSE_COLOR, FRUBERMTLV3_DIFFUSE_COLOR_MAP, MAP_FLAG_NOFLAGS);
		}
		else
		{
			setColor(RPRX_UBER_MATERIAL_SSS_SCATTER_COLOR, FRUBERMTLV3_SSS_COLOR, FRUBERMTLV3_SSS_COLOR_MAP, MAP_FLAG_NOFLAGS);
		}

		setPoint3(RPRX_UBER_MATERIAL_SSS_SCATTER_DISTANCE, FRUBERMTLV3_SSS_RADIUS, FRUBERMTLV3_SSS_RADIUS_MAP, MAP_FLAG_NOGAMMA);
		setFloat(RPRX_UBER_MATERIAL_SSS_SCATTER_DIRECTION, FRUBERMTLV3_SSS_DIRECTION, FRUBERMTLV3_SSS_DIRECTION_MAP, MAP_FLAG_NOGAMMA);

		BOOL multiScatter = GetFromPb<BOOL>(pblock, FRUBERMTLV3_SSS_MULTIPLE_SCATTERING);
		shader.xSetParameterU(RPRX_UBER_MATERIAL_SSS_MULTISCATTER, multiScatter);
	}

// Transparency
	shader.xSetValue(RPRX_UBER_MATERIAL_TRANSPARENCY, 0.0f);

	if ( isEnabled(FRUBERMTLV3_TRANSPARENCY_ENABLE) )
	{
		setFloat(RPRX_UBER_MATERIAL_TRANSPARENCY, FRUBERMTLV3_TRANSPARENCY, FRUBERMTLV3_TRANSPARENCY_MAP, MAP_FLAG_NOGAMMA);
	}

// Displacement
	if ( isEnabled(FRUBERMTLV3_DISPLACEMENT_ENABLE) )
	{
		setMap(RPRX_UBER_MATERIAL_DISPLACEMENT, FRUBERMTLV3_DISPLACEMENT_MAP, MAP_FLAG_NOGAMMA | MAP_FLAG_NORMALMAP);
	}

	return shader;
}

void FRMTLCLASSNAME(UberMtlv3)::GetDisplacement(bool& isEnabled, RprDisplacementParams& displacementParams)
{
	isEnabled = false;

	displacementParams.min = GetFromPb<float>(pblock, FRUBERMTLV3_DISPLACEMENT_MIN);
	displacementParams.max = GetFromPb<float>(pblock, FRUBERMTLV3_DISPLACEMENT_MAX);
	displacementParams.subdivType = static_cast<RprSubdivType>( GetFromPb<int>(pblock, FRUBERMTLV3_DISPLACEMENT_SUBDIV_TYPE) );
	displacementParams.factor = GetFromPb<int>(pblock, FRUBERMTLV3_DISPLACEMENT_SUBDIV);
	displacementParams.creaseWeight = GetFromPb<float>(pblock, FRUBERMTLV3_DISPLACEMENT_CREASE_WEIGHT);
	displacementParams.boundaryInteropType = GetFromPb<int>(pblock, FRUBERMTLV3_DISPLACEMENT_BOUNDARY_INTEROP_TYPE);

	BOOL isTurnedOn = GetFromPb<BOOL>(pblock, FRUBERMTLV3_DISPLACEMENT_ENABLE);

	if (isTurnedOn)
	{
		Texmap* map = GetFromPb<Texmap*>(pblock, FRUBERMTLV3_DISPLACEMENT_MAP);

		isEnabled = map != nullptr;
	}
}

FIRERENDER_NAMESPACE_END
