/*********************************************************************************************************************************
* Radeon ProRender for 3ds Max plugin
* Copyright (c) 2017 AMD
* All Rights Reserved
*
* Radeon ProRender dedicated custom material plugin
*********************************************************************************************************************************/
#include "FireRenderUberMtlv2.h"
#include "Resource.h"
#include "parser\MaterialParser.h"
#include "maxscript\mxsplugin\mxsPlugin.h"
#include <RprSupport.h>
#include <functional>

FIRERENDER_NAMESPACE_BEGIN;

namespace
{
	static const float ColorMulMin = 0.0f;
	static const float ColorMulMax = 1.0f;
	static const float WeightMin = 0.0f;
	static const float WeightMax = 1.0f;
	static const float RoughnessMulMin = 0.0f;
	static const float RoughnessMulMax = 1.0f;
	static const float AnisoMin = -1.0f;
	static const float AnisoMax = 1.0f;
	static const float IorMulMin = 0.0f;
	static const float IorMulMax = FLT_MAX;
	static const float MetalnessMulMin = 0.0f;
	static const float MetalnessMulMax = 1.0f;
	static const float RotationMin = 0.0f;
	static const float RotationMax = 1.0f;

	static const Color DiffuseColor(0.5f, 0.5f, 0.5f);
	static const float DiffuseColorMulDefault = 1.0f;
	static const Point3 DiffuseWeight(1.0f, 1.0f, 1.0f);
	static const float DiffuseWeightDefault = 1.0f;
	static const Point3 DiffuseRoughness(0.5f, 0.5f, 0.5f);
	static const float DiffuseRoughnessMulDefault = 0.0f;

	static const Color ReflectionColor(DiffuseColor);
	static const float ReflectionColorMulDefault = 1.0f;
	static const Point3 ReflectionWeight(1.0f, 1.0f, 1.0f);
	static const float ReflectionWeightDefault = 0.1f;
	static const Point3 ReflectionRoughness(0.5f, 0.5f, 0.5f);
	static const float ReflectionRoughnessMulDefault = 0.0f;
	static const float ReflectionAnisoDefault = 0.0f;
	static const float ReflectionAnisoMulDefault = 0.0f;
	static const Point3 ReflectionAnisoRotation(0.0f, 0.0f, 0.0f);
	static const float ReflectionAnisoRotationMulDefault = 0.0f;
	static const Point3 ReflectionIOR(1.0f, 1.0f, 1.0f);
	static const float ReflectionIorMulDefault = 1.5f;
	static const Point3 ReflectionMetalness(1.0f, 1.0f, 1.0f);
	static const float ReflectionMetalnessMulDefault = 0.0f;

	static const Color RefractionColor(DiffuseColor);
	static const float RefractionColorMulDefault = 1.0f;
	static const Point3 RefractionWeight(1.0f, 1.0f, 1.0f);
	static const float RefractionWeightDefault = 0.0f;
	static const Point3 RefractionRoughness(0.5f, 0.5f, 0.5f);
	static const float RefractionRoughnessMulDefault = 0.0f;
	static const Point3 RefractionIOR(1.0f, 1.0f, 1.0f);
	static const float RefractionIorMulDefault = 1.5f;

	static const Color CoatColor(DiffuseColor);
	static const float CoatColorMulDefault = 1.0f;
	static const Point3 CoatWeight(1.0f, 1.0f, 1.0f);
	static const float CoatWeightDefault = 0.0f;
	static const Point3 CoatRoughness(0.5f, 0.5f, 0.5f);
	static const float CoatRoughnessMulDefault = 0.0f;
	static const Point3 CoatIOR(1.0f, 1.0f, 1.0f);
	static const float CoatIorMulDefault = 1.5f;
	static const Point3 CoatMetalness(1.0f, 1.0f, 1.0f);
	static const float CoatMetalnessMulDefault = 0.0f;

	static const Color SssColor(DiffuseColor);
	static const float SssColorMulDefault = 1.0f;
	static const Point3 SssWeight(1.0f, 1.0f, 1.0f);
	static const float SssWeightDefault = 0.0f;
		
	static const Color SssScatterColor(DiffuseColor);
	static const float SssScatterColorMulDefault = 1.0f;
	static const float SssScatterAmountMulMin = 0.0f;
	static const float SssScatterAmountMulMax = 1.0f;
	static const float SssScatterAmountMulDefault = 1.0f;
	static const float SssScatterDirectionMin = -1.0f;
	static const float SssScatterDirectionMax = 1.0f;
	static const float SssScatterDirectionDefault = 0.0f;

	static const Color SssAbsorption(0.0f, 0.0f, 0.0f);
	static const float SssAbsorptionMulMin = 0.0f;
	static const float SssAbsorptionMulMax = 1.0f;
	static const float SssAbsorptionMulDefault = 1.0f;
	static const float SssAbsorptionDistanceMin = 0.0f;
	static const float SssAbsorptionDistanceMax = FLT_MAX;
	static const float SssAbsorptionDistanceDefault = 0.0f;

	static const Color EmissiveColor(DiffuseColor);
	static const float EmissiveColorMulDefault = 1.0f;		
	static const Point3 EmissiveWeight(1.0f, 1.0f, 1.0f);
	static const float EmissiveWeightDefault = 0.0f;

	static const float OpacityMulMin = 0.0f;
	static const float OpacityMulMax = 1.0f;
	static const float OpacityMulDefault = 1.0f;

	static const Point3 MaterialNormal(1.0f, 1.0f, 1.0f);
	static const float NormalMulMin = 0.0f;
	static const float NormalMulMax = 1.0f;
	static const float NormalMulDefault = 0.0f;

	static const float DisplaceMulMin = 0.0f;
	static const float DisplaceMulMax = 1.0f;
	static const float DisplaceMulDefault = 0.0f;

	static const float BumpMulMin = 0.0f;
	static const float BumpMulMax = 1.0f;
	static const float BumpMulDefault = 0.0f;
}

enum
{
	ROLLOUT_BASIC_PARAMS,
	ROLLOUT_COATING,
	ROLLOUT_SSS,
	ROLLOUT_ABSORPTION,
	ROLLOUT_EMISSIVE,
	ROLLOUT_OVERALL,
	ROLLOUT_MAX
};

IMPLEMENT_FRMTLCLASSDESC(UberMtlv2)


FRMTLCLASSDESCNAME(UberMtlv2) FRMTLCLASSNAME(UberMtlv2)::ClassDescInstance;


// All parameters of the material plugin. See FIRE_MAX_PBDESC definition for notes on backwards compatibility
static ParamBlockDesc2 pbDesc(
	0, _T("UberMtlv2Pbdesc"), 0, &FRMTLCLASSNAME(UberMtlv2)::ClassDescInstance, P_AUTO_CONSTRUCT| P_AUTO_UI | P_MULTIMAP | P_VERSION, FIRERENDERMTLVER_LATEST, 0,
	
	// rollouts
	ROLLOUT_MAX,
	ROLLOUT_BASIC_PARAMS, IDD_UBERMTLV2_BASIC_PARAMS, IDS_MTL_UBERV2_BASIC_PARAMS, 0, 0, NULL,
	ROLLOUT_COATING, IDD_UBERMTLV2_COATING, IDS_MTL_UBERV2_COATING, 0, APPENDROLL_CLOSED, NULL,
	ROLLOUT_SSS, IDD_UBERMTLV2_SSS, IDS_MTL_UBERV2_SSS, 0, APPENDROLL_CLOSED, NULL,
	ROLLOUT_ABSORPTION, IDD_UBERMTLV2_ABSORPTION, IDS_MTL_UBERV2_ABSORPTION, 0, APPENDROLL_CLOSED, NULL,
	ROLLOUT_EMISSIVE, IDD_UBERMTLV2_EMISSIVE, IDS_MTL_UBERV2_EMISSIVE, 0, APPENDROLL_CLOSED, NULL,
	ROLLOUT_OVERALL, IDD_UBERMTLV2_OVERALL, IDS_MTL_UBERV2_OVERALL, 0, APPENDROLL_CLOSED, NULL,

	// Diffuse Color
	FRUBERMTLV2_DIFFUSE_COLOR_MUL, _T("DiffuseColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, DiffuseColorMulDefault, p_range, ColorMulMin, ColorMulMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_DIFFUSE_COLOR_MUL, IDC_UBER_DIFFUSE_COLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_DIFFUSE_COLOR, _T("DiffuseColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, DiffuseColor, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_COLORSWATCH, IDC_UBER_DIFFUSE_COLOR, PB_END,

	FRUBERMTLV2_DIFFUSE_COLOR_MAP, _T("DiffuseColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_DIFFUSE_COLOR, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_DIFFUSE_COLOR_T, PB_END,

	FRUBERMTLV2_DIFFUSE_COLOR_USEMAP, _T("DiffuseColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_DIFFUSE_COLOR_USEMAP, PB_END,

	// Diffuse Weight
	FRUBERMTLV2_DIFFUSE_WEIGHT_MUL, _T("DiffuseWeightMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, DiffuseWeightDefault, p_range, WeightMin, WeightMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_DIFFUSE_WEIGHT_MUL, IDC_UBER_DIFFUSE_WEIGHT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_DIFFUSE_WEIGHT, _T("DiffuseWeight"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, DiffuseWeight, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_COLORSWATCH, IDC_UBER_DIFFUSE_WEIGHT, PB_END,

	FRUBERMTLV2_DIFFUSE_WEIGHT_MAP, _T("DiffuseWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_DIFFUSE_WEIGHT, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_DIFFUSE_WEIGHT_T, PB_END,

	FRUBERMTLV2_DIFFUSE_WEIGHT_USEMAP, _T("DiffuseWeightUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_DIFFUSE_WEIGHT_USEMAP, PB_END,

	// Diffuse Roughness
	FRUBERMTLV2_DIFFUSE_ROUGHNESS_MUL, _T("DiffuseRoughnessMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, DiffuseRoughnessMulDefault, p_range, RoughnessMulMin, RoughnessMulMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_DIFFUSE_ROUGHNESS_MUL, IDC_UBER_DIFFUSE_ROUGHNESS_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_DIFFUSE_ROUGHNESS, _T("DiffuseRoughness"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, DiffuseRoughness, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_COLORSWATCH, IDC_UBER_DIFFUSE_ROUGHNESS, PB_END,

	FRUBERMTLV2_DIFFUSE_ROUGHNESS_MAP, _T("DiffuseRoughnessMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_DIFFUSE_ROUGHNESS, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_DIFFUSE_ROUGHNESS_T, PB_END,

	FRUBERMTLV2_DIFFUSE_ROUGHNESS_USEMAP, _T("DiffuseRoughnessUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_DIFFUSE_ROUGHNESS_USEMAP, PB_END,



	// Reflection Color
	FRUBERMTLV2_REFLECTION_COLOR_MUL, _T("ReflectionColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, ReflectionColorMulDefault, p_range, ColorMulMin, ColorMulMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_COLOR_MUL, IDC_UBER_REFLECTION_COLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_COLOR, _T("ReflectionColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, ReflectionColor, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_COLORSWATCH, IDC_UBER_REFLECTION_COLOR, PB_END,

	FRUBERMTLV2_REFLECTION_COLOR_MAP, _T("ReflectionColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_COLOR, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_COLOR_T, PB_END,

	FRUBERMTLV2_REFLECTION_COLOR_USEMAP, _T("ReflectionColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_COLOR_USEMAP, PB_END,

	// Reflection Weight
	FRUBERMTLV2_REFLECTION_WEIGHT_MUL, _T("ReflectionWeightMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, ReflectionWeightDefault, p_range, WeightMin, WeightMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_WEIGHT_MUL, IDC_UBER_REFLECTION_WEIGHT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_WEIGHT, _T("ReflectionWeight"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, ReflectionWeight, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_COLORSWATCH, IDC_UBER_REFLECTION_WEIGHT, PB_END,

	FRUBERMTLV2_REFLECTION_WEIGHT_MAP, _T("ReflectionWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_WEIGHT, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_WEIGHT_T, PB_END,

	FRUBERMTLV2_REFLECTION_WEIGHT_USEMAP, _T("ReflectionWeightUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_WEIGHT_USEMAP, PB_END,

	// Reflection Roughness
	FRUBERMTLV2_REFLECTION_ROUGHNESS_MUL, _T("ReflectionRoughnessMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, ReflectionRoughnessMulDefault, p_range, RoughnessMulMin, RoughnessMulMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_ROUGHNESS_MUL, IDC_UBER_REFLECTION_ROUGHNESS_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_ROUGHNESS, _T("ReflectionRoughness"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, ReflectionRoughness, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_COLORSWATCH, IDC_UBER_REFLECTION_ROUGHNESS, PB_END,

	FRUBERMTLV2_REFLECTION_ROUGHNESS_MAP, _T("ReflectionRoughnessMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_ROUGHNESS, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_ROUGHNESS_T, PB_END,

	FRUBERMTLV2_REFLECTION_ROUGHNESS_USEMAP, _T("ReflectionRoughnessUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_ROUGHNESS_USEMAP, PB_END,

	// Reflection Anisotropy
	FRUBERMTLV2_REFLECTION_ANISO_MUL, _T("ReflectionAnisoMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, ReflectionAnisoMulDefault, p_range, AnisoMin, AnisoMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_ANISO_MUL, IDC_UBER_REFLECTION_ANISO_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_ANISO_MAP, _T("ReflectionAnisoMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_ANISO, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_ANISO_T, PB_END,

	FRUBERMTLV2_REFLECTION_ANISO_USEMAP, _T("ReflectionAnisoUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_ANISO_USEMAP, PB_END,

	// Reflection Anisotropy Rotation
	FRUBERMTLV2_REFLECTION_ANISO_ROT_MUL, _T("ReflectionAnisoRotMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, ReflectionAnisoRotationMulDefault, p_range, RotationMin, RotationMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_ANISO_ROT_MUL, IDC_UBER_REFLECTION_ANISO_ROT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_ANISO_ROT, _T("ReflectionAnisoRot"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, ReflectionAnisoRotation, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_COLORSWATCH, IDC_UBER_REFLECTION_ANISO_ROT, PB_END,

	FRUBERMTLV2_REFLECTION_ANISO_ROT_MAP, _T("ReflectionAnisoRotMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_ANISO_ROT, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_ANISO_ROT_T, PB_END,

	FRUBERMTLV2_REFLECTION_ANISO_ROT_USEMAP, _T("ReflectionAnisoRotUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_ANISO_ROT_USEMAP, PB_END,

	// Reflection Mode
	FRUBERMTLV2_REFLECTION_MODE, _T("ReflectionMode"), TYPE_INT, P_ANIMATABLE, 0,
	p_default, RPRX_UBER_MATERIAL_REFLECTION_MODE_PBR, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_INT_COMBOBOX, IDC_UBER_REFLECTION_MODE, 2, IDS_IOR, IDS_METALNESS,
	p_vals, RPRX_UBER_MATERIAL_REFLECTION_MODE_PBR, RPRX_UBER_MATERIAL_REFLECTION_MODE_METALNESS, PB_END,

	// Reflection IOR
	FRUBERMTLV2_REFLECTION_IOR_MUL, _T("ReflectionIORMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, ReflectionIorMulDefault, p_range, IorMulMin, IorMulMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_IOR_MUL, IDC_UBER_REFLECTION_IOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_IOR, _T("ReflectionIOR"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, ReflectionIOR, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_COLORSWATCH, IDC_UBER_REFLECTION_IOR, PB_END,

	FRUBERMTLV2_REFLECTION_IOR_MAP, _T("ReflectionIORMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_IOR, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_IOR_T, PB_END,

	FRUBERMTLV2_REFLECTION_IOR_USEMAP, _T("ReflectionIORUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_IOR_USEMAP, PB_END,

	// Reflection Metalness
	FRUBERMTLV2_REFLECTION_METALNESS_MUL, _T("ReflectionMetalnessMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, ReflectionMetalnessMulDefault, p_range, MetalnessMulMin, MetalnessMulMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_METALNESS_MUL, IDC_UBER_REFLECTION_METALNESS_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_METALNESS, _T("ReflectionMetalness"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, ReflectionMetalness, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_COLORSWATCH, IDC_UBER_REFLECTION_METALNESS, PB_END,

	FRUBERMTLV2_REFLECTION_METALNESS_MAP, _T("ReflectionMetalnessMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_METALNESS, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_METALNESS_T, PB_END,

	FRUBERMTLV2_REFLECTION_METALNESS_USEMAP, _T("ReflectionMetalnessUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_METALNESS_USEMAP, PB_END,



	// Refraction Color
	FRUBERMTLV2_REFRACTION_COLOR_MUL, _T("RefractionColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, RefractionColorMulDefault, p_range, ColorMulMin, ColorMulMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFRACTION_COLOR_MUL, IDC_UBER_REFRACTION_COLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFRACTION_COLOR, _T("RefractionColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, RefractionColor, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_COLORSWATCH, IDC_UBER_REFRACTION_COLOR, PB_END,

	FRUBERMTLV2_REFRACTION_COLOR_MAP, _T("RefractionColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFRACTION_COLOR, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_REFRACTION_COLOR_T, PB_END,

	FRUBERMTLV2_REFRACTION_COLOR_USEMAP, _T("RefractionColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_REFRACTION_COLOR_USEMAP, PB_END,

	// Refraction Weight
	FRUBERMTLV2_REFRACTION_WEIGHT_MUL, _T("RefractionWeightMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, RefractionWeightDefault, p_range, WeightMin, WeightMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFRACTION_WEIGHT_MUL, IDC_UBER_REFRACTION_WEIGHT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFRACTION_WEIGHT, _T("RefractionWeight"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, RefractionWeight, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_COLORSWATCH, IDC_UBER_REFRACTION_WEIGHT, PB_END,

	FRUBERMTLV2_REFRACTION_WEIGHT_MAP, _T("RefractionWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFRACTION_WEIGHT, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_REFRACTION_WEIGHT_T, PB_END,

	FRUBERMTLV2_REFRACTION_WEIGHT_USEMAP, _T("RefractionWeightUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_REFRACTION_WEIGHT_USEMAP, PB_END,

	// Refraction Roughness
	FRUBERMTLV2_REFRACTION_ROUGHNESS_MUL, _T("RefractionRoughnessMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, RefractionRoughnessMulDefault, p_range, RoughnessMulMin, RoughnessMulMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFRACTION_ROUGHNESS_MUL, IDC_UBER_REFRACTION_ROUGHNESS_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFRACTION_ROUGHNESS, _T("RefractionRoughness"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, RefractionRoughness, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_COLORSWATCH, IDC_UBER_REFRACTION_ROUGHNESS, PB_END,

	FRUBERMTLV2_REFRACTION_ROUGHNESS_MAP, _T("RefractionRoughnessMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFRACTION_ROUGHNESS, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_REFRACTION_ROUGHNESS_T, PB_END,

	FRUBERMTLV2_REFRACTION_ROUGHNESS_USEMAP, _T("RefractionRoughnessUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_REFRACTION_ROUGHNESS_USEMAP, PB_END,

	// Refraction IOR
	FRUBERMTLV2_REFRACTION_IOR_MUL, _T("RefractionIORMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, RefractionIorMulDefault, p_range, IorMulMin, IorMulMax, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFRACTION_IOR_MUL, IDC_UBER_REFRACTION_IOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFRACTION_IOR, _T("RefractionIOR"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, RefractionIOR, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_COLORSWATCH, IDC_UBER_REFRACTION_IOR, PB_END,

	FRUBERMTLV2_REFRACTION_IOR_MAP, _T("RefractionIORMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFRACTION_IOR, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_TEXMAPBUTTON, IDC_UBER_REFRACTION_IOR_T, PB_END,

	FRUBERMTLV2_REFRACTION_IOR_USEMAP, _T("RefractionIORUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_REFRACTION_IOR_USEMAP, PB_END,

	// Refraction Thin Surface
	FRUBERMTLV2_REFRACTION_THIN_SURFACE, _T("RefractionThinSurface"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_REFRACTION_THIN_SURFACE, PB_END,

	// Refraction link to Reflection
	FRUBERMTLV2_REFRACTION_LINK_TO_REFLECTION, _T("LinkToReflection"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE, p_ui, ROLLOUT_BASIC_PARAMS, TYPE_SINGLECHEKBOX, IDC_UBER_REFRACTION_LINK_TO_REFLECTION, PB_END,




	// Coat Color
	FRUBERMTLV2_COAT_COLOR_MUL, _T("CoatColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, CoatColorMulDefault, p_range, ColorMulMin, ColorMulMax, p_ui, ROLLOUT_COATING, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_COAT_COLOR_MUL, IDC_UBER_COAT_COLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_COAT_COLOR, _T("CoatColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, CoatColor, p_ui, ROLLOUT_COATING, TYPE_COLORSWATCH, IDC_UBER_COAT_COLOR, PB_END,

	FRUBERMTLV2_COAT_COLOR_MAP, _T("CoatColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_COAT_COLOR, p_ui, ROLLOUT_COATING, TYPE_TEXMAPBUTTON, IDC_UBER_COAT_COLOR_T, PB_END,

	FRUBERMTLV2_COAT_COLOR_USEMAP, _T("CoatColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_COATING, TYPE_SINGLECHEKBOX, IDC_UBER_COAT_COLOR_USEMAP, PB_END,

	// Coat Weight
	FRUBERMTLV2_COAT_WEIGHT_MUL, _T("CoatWeightMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, CoatWeightDefault, p_range, WeightMin, WeightMax, p_ui, ROLLOUT_COATING, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_COAT_WEIGHT_MUL, IDC_UBER_COAT_WEIGHT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_COAT_WEIGHT, _T("CoatWeight"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, CoatWeight, p_ui, ROLLOUT_COATING, TYPE_COLORSWATCH, IDC_UBER_COAT_WEIGHT, PB_END,

	FRUBERMTLV2_COAT_WEIGHT_MAP, _T("CoatWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_COAT_WEIGHT, p_ui, ROLLOUT_COATING, TYPE_TEXMAPBUTTON, IDC_UBER_COAT_WEIGHT_T, PB_END,

	FRUBERMTLV2_COAT_WEIGHT_USEMAP, _T("CoatWeightUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_COATING, TYPE_SINGLECHEKBOX, IDC_UBER_COAT_WEIGHT_USEMAP, PB_END,

	// Coat Roughness
	FRUBERMTLV2_COAT_ROUGHNESS_MUL, _T("CoatRoughnessMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, CoatRoughnessMulDefault, p_range, RoughnessMulMin, RoughnessMulMax, p_ui, ROLLOUT_COATING, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_COAT_ROUGHNESS_MUL, IDC_UBER_COAT_ROUGHNESS_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_COAT_ROUGHNESS, _T("CoatRoughness"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, CoatRoughness, p_ui, ROLLOUT_COATING, TYPE_COLORSWATCH, IDC_UBER_COAT_ROUGHNESS, PB_END,

	FRUBERMTLV2_COAT_ROUGHNESS_MAP, _T("CoatRoughnessMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_COAT_ROUGHNESS, p_ui, ROLLOUT_COATING, TYPE_TEXMAPBUTTON, IDC_UBER_COAT_ROUGHNESS_T, PB_END,

	FRUBERMTLV2_COAT_ROUGHNESS_USEMAP, _T("CoatRoughnessUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_COATING, TYPE_SINGLECHEKBOX, IDC_UBER_COAT_ROUGHNESS_USEMAP, PB_END,

#ifdef CODE_TO_PORT
	// Coat Normal
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_COAT_NORMAL_MUL, IDC_UBER_COAT_NORMAL_MUL_S, SPIN_AUTOSCALE, PB_END,
	
	FRUBERMTLV2_COAT_NORMAL_MAP, _T("CoatNormalTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_COAT_NORMAL, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_COAT_NORMAL_T, PB_END,
	
	FRUBERMTLV2_COAT_NORMAL_USEMAP, _T("CoatNormalUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_COAT_NORMAL_USEMAP, PB_END,
#endif

	// Coat Mode
	FRUBERMTLV2_COAT_MODE, _T("CoatMode"), TYPE_INT, P_ANIMATABLE, 0,
	p_default, RPRX_UBER_MATERIAL_COATING_MODE_PBR, p_ui, ROLLOUT_COATING, TYPE_INT_COMBOBOX, IDC_UBER_COAT_MODE, 2, IDS_IOR, IDS_METALNESS,
	p_vals, RPRX_UBER_MATERIAL_COATING_MODE_PBR, RPRX_UBER_MATERIAL_COATING_MODE_METALNESS, PB_END,

	// Coat IOR
	FRUBERMTLV2_COAT_IOR_MUL, _T("CoatIORMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, CoatIorMulDefault, p_range, IorMulMin, IorMulMax, p_ui, ROLLOUT_COATING, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_COAT_IOR_MUL, IDC_UBER_COAT_IOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_COAT_IOR, _T("CoatIOR"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, CoatIOR, p_ui, ROLLOUT_COATING, TYPE_COLORSWATCH, IDC_UBER_COAT_IOR, PB_END,

	FRUBERMTLV2_COAT_IOR_MAP, _T("CoatIORMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_COAT_IOR, p_ui, ROLLOUT_COATING, TYPE_TEXMAPBUTTON, IDC_UBER_COAT_IOR_T, PB_END,

	FRUBERMTLV2_COAT_IOR_USEMAP, _T("CoatIORUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_COATING, TYPE_SINGLECHEKBOX, IDC_UBER_COAT_IOR_USEMAP, PB_END,

	// Coat Metalness
	FRUBERMTLV2_COAT_METALNESS_MUL, _T("CoatMetalnessMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, CoatMetalnessMulDefault, p_range, MetalnessMulMin, MetalnessMulMax, p_ui, ROLLOUT_COATING, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_COAT_METALNESS_MUL, IDC_UBER_COAT_METALNESS_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_COAT_METALNESS, _T("CoatMetalness"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, CoatMetalness, p_ui, ROLLOUT_COATING, TYPE_COLORSWATCH, IDC_UBER_COAT_METALNESS, PB_END,

	FRUBERMTLV2_COAT_METALNESS_MAP, _T("CoatMetalnessMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_COAT_METALNESS, p_ui, ROLLOUT_COATING, TYPE_TEXMAPBUTTON, IDC_UBER_COAT_METALNESS_T, PB_END,

	FRUBERMTLV2_COAT_METALNESS_USEMAP, _T("CoatMetalnessUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_COATING, TYPE_SINGLECHEKBOX, IDC_UBER_COAT_METALNESS_USEMAP, PB_END,




	// Use SSS Diffuse Color
	FRUBERMTLV2_USE_SSS_DIFFUSE_COLOR, _T("UseSSSDiffuseColor"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE, p_ui, ROLLOUT_SSS, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_USE_DIFFUSE_COLOR, PB_END,

	// SSS Sub-Surface Color
	FRUBERMTLV2_SSS_SUBSURFACE_COLOR_MUL, _T("SSSSubSurfaceColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, SssColorMulDefault, p_range, ColorMulMin, ColorMulMax, p_ui, ROLLOUT_SSS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_SUBSURFACE_COLOR_MUL, IDC_UBER_SSS_SUBSURFACE_COLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_SUBSURFACE_COLOR, _T("SSSSubSurfaceColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, SssColor, p_ui, ROLLOUT_SSS, TYPE_COLORSWATCH, IDC_UBER_SSS_SUBSURFACE_COLOR, PB_END,

	FRUBERMTLV2_SSS_SUBSURFACE_COLOR_MAP, _T("SSSColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_SUBSURFACE_COLOR, p_ui, ROLLOUT_SSS, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_SUBSURFACE_COLOR_T, PB_END,

	FRUBERMTLV2_SSS_SUBSURFACE_COLOR_USEMAP, _T("SSSSubSurfaceColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_SSS, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_SUBSURFACE_COLOR_USEMAP, PB_END,

	// SSS Weight
	FRUBERMTLV2_SSS_WEIGHT_MUL, _T("SSSWeightMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, SssWeightDefault, p_range, WeightMin, WeightMax, p_ui, ROLLOUT_SSS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_WEIGHT_MUL, IDC_UBER_SSS_WEIGHT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_WEIGHT, _T("SSSWeight"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, SssWeight, p_ui, ROLLOUT_SSS, TYPE_COLORSWATCH, IDC_UBER_SSS_WEIGHT, PB_END,

	FRUBERMTLV2_SSS_WEIGHT_MAP, _T("SSSWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_WEIGHT, p_ui, ROLLOUT_SSS, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_WEIGHT_T, PB_END,

	FRUBERMTLV2_SSS_WEIGHT_USEMAP, _T("SSSWeightUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_SSS, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_WEIGHT_USEMAP, PB_END,

	// SSS Scatter Color
	FRUBERMTLV2_SSS_SCATTER_COLOR_MUL, _T("SSSScatterColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, SssScatterColorMulDefault, p_range, ColorMulMin, ColorMulMax, p_ui, ROLLOUT_SSS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_SCATTERCOLOR_MUL, IDC_UBER_SSS_SCATTERCOLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_SCATTER_COLOR, _T("SSSScatterColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, SssScatterColor, p_ui, ROLLOUT_SSS, TYPE_COLORSWATCH, IDC_UBER_SSS_SCATTERCOLOR, PB_END,

	FRUBERMTLV2_SSS_SCATTER_COLOR_MAP, _T("SSSScatterColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_SCATTER_COLOR, p_ui, ROLLOUT_SSS, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_SCATTERCOLOR_T, PB_END,

	FRUBERMTLV2_SSS_SCATTER_COLOR_USEMAP, _T("SSSScatterColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_SSS, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_SCATTERCOLOR_USEMAP, PB_END,

	// SSS Scatter Amount
	FRUBERMTLV2_SSS_SCATTER_AMOUNT_MUL, _T("SSSScatterAmountMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, SssScatterAmountMulDefault, p_range, SssScatterAmountMulMin, SssScatterAmountMulMax, p_ui, ROLLOUT_SSS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_SCATTERAMOUNT_MUL, IDC_UBER_SSS_SCATTERAMOUNT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_SCATTER_AMOUNT_MAP, _T("SSSScatterAmountTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_SCATTER_AMOUNT, p_ui, ROLLOUT_SSS, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_SCATTERAMOUNT_T, PB_END,

	FRUBERMTLV2_SSS_SCATTER_AMOUNT_USEMAP, _T("SSSScatterAmountUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_SSS, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_SCATTERAMOUNT_USEMAP, PB_END,

	// SSS Directionality
	FRUBERMTLV2_SSS_DIRECTION_MUL, _T("SSSDirectionalityMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, SssScatterDirectionDefault, p_range, SssScatterDirectionMin, SssScatterDirectionMax, p_ui, ROLLOUT_SSS, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_DIRECTION_MUL, IDC_UBER_SSS_DIRECTION_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_DIRECTION_MAP, _T("SSSDirectionTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_DIRECTION, p_ui, ROLLOUT_SSS, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_DIRECTION_T, PB_END,

	FRUBERMTLV2_SSS_DIRECTION_USEMAP, _T("SSSDirectionUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_SSS, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_DIRECTION_USEMAP, PB_END,

	// SSS SingleScattering
	FRUBERMTLV2_SSS_SINGLESCATTERING, _T("UseSSSSingleScattering"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE, p_ui, ROLLOUT_SSS, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_SINGLESCATTERING, PB_END,




	// SSS Absorption
	FRUBERMTLV2_SSS_ABSORPTION_MUL, _T("SSSAbsorptionMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, SssAbsorptionMulDefault, p_range, SssAbsorptionMulMin, SssAbsorptionMulMax, p_ui, ROLLOUT_ABSORPTION, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_ABSORPTION_MUL, IDC_UBER_SSS_ABSORPTION_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_ABSORPTION, _T("SSSAbsorption"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, SssAbsorption, p_ui, ROLLOUT_ABSORPTION, TYPE_COLORSWATCH, IDC_UBER_SSS_ABSORPTION, PB_END,

	FRUBERMTLV2_SSS_ABSORPTION_MAP, _T("SSSAbsorptionTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_ABSORPTION, p_ui, ROLLOUT_ABSORPTION, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_ABSORPTION_T, PB_END,

	FRUBERMTLV2_SSS_ABSORPTION_USEMAP, _T("SSSAbsorptionUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_ABSORPTION, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_ABSORPTION_USEMAP, PB_END,

	// SSS Absorption Distance
	FRUBERMTLV2_SSS_ABSORPTION_DIST_MUL, _T("AbsorptionDistanceMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, SssAbsorptionDistanceDefault, p_range, SssAbsorptionDistanceMin, SssAbsorptionDistanceMax, p_ui, ROLLOUT_ABSORPTION, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_ABSORPTION_DIST_MUL, IDC_UBER_SSS_ABSORPTION_DIST_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_ABSORPTION_DIST_MAP, _T("SSSAbsorptionDistTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_ABSORPTION_DIST, p_ui, ROLLOUT_ABSORPTION, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_ABSORPTION_DIST_T, PB_END,

	FRUBERMTLV2_SSS_ABSORPTION_DIST_USEMAP, _T("SSSAbsorptionDistUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_ABSORPTION, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_ABSORPTION_DIST_USEMAP, PB_END,




	// Emissive Color
	FRUBERMTLV2_EMISSIVE_COLOR_MUL, _T("EmissiveColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, EmissiveColorMulDefault, p_range, ColorMulMin, ColorMulMax, p_ui, ROLLOUT_EMISSIVE, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_EMISSIVE_COLOR_MUL, IDC_UBER_EMISSIVE_COLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_EMISSIVE_COLOR, _T("EmissiveColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, EmissiveColor, p_ui, ROLLOUT_EMISSIVE, TYPE_COLORSWATCH, IDC_UBER_EMISSIVE_COLOR, PB_END,

	FRUBERMTLV2_EMISSIVE_COLOR_MAP, _T("EmissiveColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_EMISSIVE_COLOR, p_ui, ROLLOUT_EMISSIVE, TYPE_TEXMAPBUTTON, IDC_UBER_EMISSIVE_COLOR_T, PB_END,

	FRUBERMTLV2_EMISSIVE_COLOR_USEMAP, _T("EmissiveColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_EMISSIVE, TYPE_SINGLECHEKBOX, IDC_UBER_EMISSIVE_COLOR_USEMAP, PB_END,

	// Emissive Weight
	FRUBERMTLV2_EMISSIVE_WEIGHT_MUL, _T("EmissiveWeightMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, EmissiveWeightDefault, p_range, WeightMin, WeightMax, p_ui, ROLLOUT_EMISSIVE, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_EMISSIVE_WEIGHT_MUL, IDC_UBER_EMISSIVE_WEIGHT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_EMISSIVE_WEIGHT, _T("EmissiveWeight"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, EmissiveWeight, p_ui, ROLLOUT_EMISSIVE, TYPE_COLORSWATCH, IDC_UBER_EMISSIVE_WEIGHT, PB_END,

	FRUBERMTLV2_EMISSIVE_WEIGHT_MAP, _T("EmissiveWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_EMISSIVE_WEIGHT, p_ui, ROLLOUT_EMISSIVE, TYPE_TEXMAPBUTTON, IDC_UBER_EMISSIVE_WEIGHT_T, PB_END,

	FRUBERMTLV2_EMISSIVE_WEIGHT_USEMAP, _T("EmissiveWeightUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_EMISSIVE, TYPE_SINGLECHEKBOX, IDC_UBER_EMISSIVE_WEIGHT_USEMAP, PB_END,

	// Emissive Doublesided
	FRUBERMTLV2_EMISSIVE_DOUBLESIDED, _T("EmissiveDoubleSided"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE, p_ui, ROLLOUT_EMISSIVE, TYPE_SINGLECHEKBOX, IDC_UBER_EMISSIVE_DOUBLESIDED, PB_END,




	// Material Opacity
	FRUBERMTLV2_MAT_OPACITY_MUL, _T("MaterialOpacityMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, OpacityMulDefault, p_range, OpacityMulMin, OpacityMulMax, p_ui, ROLLOUT_OVERALL, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_MAT_OPACITY_MUL, IDC_UBER_MAT_OPACITY_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_MAT_OPACITY_MAP, _T("MaterialOpacityTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_MAT_OPACITY, p_ui, ROLLOUT_OVERALL, TYPE_TEXMAPBUTTON, IDC_UBER_MAT_OPACITY_T, PB_END,

	FRUBERMTLV2_MAT_OPACITY_USEMAP, _T("MaterialOpacityUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_OVERALL, TYPE_SINGLECHEKBOX, IDC_UBER_MAT_OPACITY_USEMAP, PB_END,

	// Material Normal
	FRUBERMTLV2_MAT_NORMAL_MUL, _T("MaterialNormalMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, NormalMulDefault, p_range, NormalMulMin, NormalMulMax, p_ui, ROLLOUT_OVERALL, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_MAT_NORMAL_MUL, IDC_UBER_MAT_NORMAL_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_MAT_NORMAL, _T("MaterialNormal"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, MaterialNormal, p_ui, ROLLOUT_OVERALL, TYPE_COLORSWATCH, IDC_UBER_MAT_NORMAL, PB_END,

	FRUBERMTLV2_MAT_NORMAL_MAP, _T("MaterialNormalTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_MAT_NORMAL, p_ui, ROLLOUT_OVERALL, TYPE_TEXMAPBUTTON, IDC_UBER_MAT_NORMAL_T, PB_END,

	FRUBERMTLV2_MAT_NORMAL_USEMAP, _T("MaterialNormalUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_OVERALL, TYPE_SINGLECHEKBOX, IDC_UBER_MAT_NORMAL_USEMAP, PB_END,

	// Material Displace
	FRUBERMTLV2_MAT_DISPLACE_MUL, _T("MaterialDisplaceMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, DisplaceMulDefault, p_range, DisplaceMulMin, DisplaceMulMax, p_ui, ROLLOUT_OVERALL, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_MAT_DISPLACE_MUL, IDC_UBER_MAT_DISPLACE_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_MAT_DISPLACE_MAP, _T("MaterialDisplaceTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_MAT_DISPLACE, p_ui, ROLLOUT_OVERALL, TYPE_TEXMAPBUTTON, IDC_UBER_MAT_DISPLACE_T, PB_END,

	FRUBERMTLV2_MAT_DISPLACE_USEMAP, _T("MaterialDisplaceUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_OVERALL, TYPE_SINGLECHEKBOX, IDC_UBER_MAT_DISPLACE_USEMAP, PB_END,

	// Material Bump
	FRUBERMTLV2_MAT_BUMP_MUL, _T("MaterialBumpMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, BumpMulDefault, p_range, BumpMulMin, BumpMulMax, p_ui, ROLLOUT_OVERALL, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_MAT_BUMP_MUL, IDC_UBER_MAT_BUMP_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_MAT_BUMP_MAP, _T("MaterialBumpTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_MAT_BUMP, p_ui, ROLLOUT_OVERALL, TYPE_TEXMAPBUTTON, IDC_UBER_MAT_BUMP_T, PB_END,

	FRUBERMTLV2_MAT_BUMP_USEMAP, _T("MaterialBumpUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, ROLLOUT_OVERALL, TYPE_SINGLECHEKBOX, IDC_UBER_MAT_BUMP_USEMAP, PB_END,

	PB_END
);

std::map<int, std::pair<ParamID, MCHAR*>> FRMTLCLASSNAME(UberMtlv2)::TEXMAP_MAPPING = {
	{ FRUBERMTLV2_MAP_DIFFUSE_COLOR,{ FRUBERMTLV2_DIFFUSE_COLOR_MAP, _T("Diffuse Color") } },
	{ FRUBERMTLV2_MAP_DIFFUSE_WEIGHT,{ FRUBERMTLV2_DIFFUSE_WEIGHT_MAP, _T("Diffuse Weight") } },
	{ FRUBERMTLV2_MAP_DIFFUSE_ROUGHNESS,{ FRUBERMTLV2_DIFFUSE_ROUGHNESS_MAP, _T("Diffuse Roughness") } },
	{ FRUBERMTLV2_MAP_REFLECTION_COLOR,{ FRUBERMTLV2_REFLECTION_COLOR_MAP, _T("Reflection Color") } },
	{ FRUBERMTLV2_MAP_REFLECTION_WEIGHT,{ FRUBERMTLV2_REFLECTION_WEIGHT_MAP, _T("Reflection Weight") } },
	{ FRUBERMTLV2_MAP_REFLECTION_ROUGHNESS,{ FRUBERMTLV2_REFLECTION_ROUGHNESS_MAP, _T("Reflection Roughness") } },
	{ FRUBERMTLV2_MAP_REFLECTION_ANISO,{ FRUBERMTLV2_REFLECTION_ANISO_MAP, _T("Reflection Anisotropy") } },
	{ FRUBERMTLV2_MAP_REFLECTION_ANISO_ROT,{ FRUBERMTLV2_REFLECTION_ANISO_ROT_MAP, _T("Reflection Anisotropy Rotation") } },
	{ FRUBERMTLV2_MAP_REFLECTION_IOR,{ FRUBERMTLV2_REFLECTION_IOR_MAP, _T("Reflection IOR") } },
	{ FRUBERMTLV2_MAP_REFLECTION_METALNESS,{ FRUBERMTLV2_REFLECTION_METALNESS_MAP, _T("Reflection Metalness") } },

	{ FRUBERMTLV2_MAP_REFRACTION_COLOR,{ FRUBERMTLV2_REFRACTION_COLOR_MAP, _T("Refraction Color") } },
	{ FRUBERMTLV2_MAP_REFRACTION_WEIGHT,{ FRUBERMTLV2_REFRACTION_WEIGHT_MAP, _T("Refraction Weight") } },
	{ FRUBERMTLV2_MAP_REFRACTION_ROUGHNESS,{ FRUBERMTLV2_REFRACTION_ROUGHNESS_MAP, _T("Refraction Roughness") } },
	{ FRUBERMTLV2_MAP_REFRACTION_IOR,{ FRUBERMTLV2_REFRACTION_IOR_MAP, _T("Refraction IOR") } },

	{ FRUBERMTLV2_MAP_COAT_COLOR,{ FRUBERMTLV2_COAT_COLOR_MAP, _T("Coat Color") } },
	{ FRUBERMTLV2_MAP_COAT_WEIGHT,{ FRUBERMTLV2_COAT_WEIGHT_MAP, _T("Coat Weight") } },
	{ FRUBERMTLV2_MAP_COAT_ROUGHNESS,{ FRUBERMTLV2_COAT_ROUGHNESS_MAP, _T("Coat Roughness") } },
	{ FRUBERMTLV2_MAP_COAT_IOR,{ FRUBERMTLV2_COAT_IOR_MAP, _T("Coat IOR") } },
	{ FRUBERMTLV2_MAP_COAT_METALNESS,{ FRUBERMTLV2_COAT_METALNESS_MAP, _T("Coat Metalness") } },

	{ FRUBERMTLV2_MAP_SSS_SUBSURFACE_COLOR,{ FRUBERMTLV2_SSS_SUBSURFACE_COLOR_MAP, _T("Sub-Surface Color") } },
	{ FRUBERMTLV2_MAP_SSS_WEIGHT,{ FRUBERMTLV2_SSS_WEIGHT_MAP, _T("SSS Weight") } },
	{ FRUBERMTLV2_MAP_SSS_SCATTER_COLOR,{ FRUBERMTLV2_SSS_SCATTER_COLOR_MAP, _T("Scatter Color") } },
	{ FRUBERMTLV2_MAP_SSS_SCATTER_AMOUNT,{ FRUBERMTLV2_SSS_SCATTER_AMOUNT_MAP, _T("Scatter Amount") } },
	{ FRUBERMTLV2_MAP_SSS_ABSORPTION,{ FRUBERMTLV2_SSS_ABSORPTION_MAP, _T("Absorption") } },
	{ FRUBERMTLV2_MAP_SSS_ABSORPTION_DIST,{ FRUBERMTLV2_SSS_ABSORPTION_DIST_MAP, _T("Absorption Distance") } },
	{ FRUBERMTLV2_MAP_SSS_DIRECTION,{ FRUBERMTLV2_SSS_DIRECTION_MAP, _T("Scatter Direction") } },

	{ FRUBERMTLV2_MAP_EMISSIVE_COLOR,{ FRUBERMTLV2_EMISSIVE_COLOR_MAP, _T("Emissive Color") } },
	{ FRUBERMTLV2_MAP_EMISSIVE_WEIGHT,{ FRUBERMTLV2_EMISSIVE_WEIGHT_MAP, _T("Emissive Weight") } },

	{ FRUBERMTLV2_MAP_MAT_OPACITY,{ FRUBERMTLV2_MAT_OPACITY_MAP, _T("Material Opacity") } },
	{ FRUBERMTLV2_MAP_MAT_NORMAL,{ FRUBERMTLV2_MAT_NORMAL_MAP, _T("Material Normal") } },
	{ FRUBERMTLV2_MAP_MAT_DISPLACE,{ FRUBERMTLV2_MAT_DISPLACE_MAP, _T("Material Displace") } },
	{ FRUBERMTLV2_MAP_MAT_BUMP,{ FRUBERMTLV2_MAT_BUMP_MAP, _T("Material Bump") } },
};

FRMTLCLASSNAME(UberMtlv2)::~FRMTLCLASSNAME(UberMtlv2)()
{
}

frw::Shader FRMTLCLASSNAME(UberMtlv2)::getVolumeShader(const TimeValue t, MaterialParser& mtlParser, INode* node)
{
	return frw::Shader();
}

frw::Shader FRMTLCLASSNAME(UberMtlv2)::getShader(const TimeValue t, MaterialParser& mtlParser, INode* node)
{
	auto ms = mtlParser.materialSystem;
	frw::Scope& scope = mtlParser.GetScope();

	frw::Shader shader(scope.GetContext(), scope.GetContextEx(), RPRX_MATERIAL_UBER);

	SetupDiffuse(mtlParser, shader);
	SetupReflection(mtlParser, shader);
	SetupRefraction(mtlParser, shader);
	SetupCoating(mtlParser, shader);
	SetupSSS(mtlParser, shader);
	SetupEmissive(mtlParser, shader);
	SetupMaterial(mtlParser, shader);

	return shader;
}

std::tuple<bool, Texmap*, Color, float> FRMTLCLASSNAME(UberMtlv2)::GetParameters(FRUberMtlV2_ParamID useMapId,
	FRUberMtlV2_ParamID mapId, FRUberMtlV2_ParamID colorId, FRUberMtlV2_ParamID mulId)
{
	bool useMap = GetFromPb<bool>(pblock, useMapId);
	Texmap* map = GetFromPb<Texmap*>(pblock, mapId);
	Color color = GetFromPb<Color>(pblock, colorId);
	float mul = GetFromPb<float>(pblock, mulId);

	return std::make_tuple(useMap, map, color, mul);
}

std::tuple<bool, Texmap*, Color, float> FRMTLCLASSNAME(UberMtlv2)::GetParametersNoColor(FRUberMtlV2_ParamID useMapId,
	FRUberMtlV2_ParamID mapId, FRUberMtlV2_ParamID mulId)
{
	bool useMap = GetFromPb<bool>(pblock, useMapId);
	Texmap* map = GetFromPb<Texmap*>(pblock, mapId);
	Color color(1.0f, 1.0f, 1.0f);
	float mul = GetFromPb<float>(pblock, mulId);

	return std::make_tuple(useMap, map, color, mul);
}

frw::Value FRMTLCLASSNAME(UberMtlv2)::SetupShaderOrdinary(MaterialParser& mtlParser,
	std::tuple<bool, Texmap*, Color, float> parameters, int mapFlags)
{
	bool useMap = std::get<0>(parameters);
	Texmap* map = std::get<1>(parameters);
	Color color = std::get<2>(parameters);
	float mul = std::get<3>(parameters);

	frw::Value value = frw::Value(color);

	if (useMap && map != nullptr)
	{
		value = mtlParser.createMap(map, mapFlags);
	}

	value = mtlParser.materialSystem.ValueMul(value, mul);

	return std::move(value);
}

void FRMTLCLASSNAME(UberMtlv2)::SetupDiffuse(MaterialParser& mtlParser, frw::Shader& shader)
{
	std::tuple<bool, Texmap*, Color, float> parameters = { false, nullptr, Color(0.0f, 0.0f, 0.0f), 0.0f };
	frw::Value value;

	// DIFFUSE COLOR
	parameters = GetParameters(FRUBERMTLV2_DIFFUSE_COLOR_USEMAP,
		FRUBERMTLV2_DIFFUSE_COLOR_MAP, FRUBERMTLV2_DIFFUSE_COLOR, FRUBERMTLV2_DIFFUSE_COLOR_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOFLAGS);
	shader.xSetValue(RPRX_UBER_MATERIAL_DIFFUSE_COLOR, value);

	// DIFFUSE WEIGHT
	parameters = GetParameters(FRUBERMTLV2_DIFFUSE_WEIGHT_USEMAP,
		FRUBERMTLV2_DIFFUSE_WEIGHT_MAP, FRUBERMTLV2_DIFFUSE_WEIGHT, FRUBERMTLV2_DIFFUSE_WEIGHT_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_DIFFUSE_WEIGHT, value);

	// DIFFUSE ROUGHNESS
	parameters = GetParameters(FRUBERMTLV2_DIFFUSE_ROUGHNESS_USEMAP,
		FRUBERMTLV2_DIFFUSE_ROUGHNESS_MAP, FRUBERMTLV2_DIFFUSE_ROUGHNESS, FRUBERMTLV2_DIFFUSE_ROUGHNESS_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_DIFFUSE_ROUGHNESS, value);
}

void FRMTLCLASSNAME(UberMtlv2)::SetupReflection(MaterialParser& mtlParser, frw::Shader& shader)
{
	std::tuple<bool, Texmap*, Color, float> parameters = { false, nullptr, Color(0.0f, 0.0f, 0.0f), 0.0f };
	frw::Value value;

	// REFLECTION COLOR
	parameters = GetParameters(FRUBERMTLV2_REFLECTION_COLOR_USEMAP,
		FRUBERMTLV2_REFLECTION_COLOR_MAP, FRUBERMTLV2_REFLECTION_COLOR, FRUBERMTLV2_REFLECTION_COLOR_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOFLAGS);
	shader.xSetValue(RPRX_UBER_MATERIAL_REFLECTION_COLOR, value);

	// REFLECTION WEIGHT
	parameters = GetParameters(FRUBERMTLV2_REFLECTION_WEIGHT_USEMAP,
		FRUBERMTLV2_REFLECTION_WEIGHT_MAP, FRUBERMTLV2_REFLECTION_WEIGHT, FRUBERMTLV2_REFLECTION_WEIGHT_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_REFLECTION_WEIGHT, value);

	// REFLECTION ROUGHNESS
	parameters = GetParameters(FRUBERMTLV2_REFLECTION_ROUGHNESS_USEMAP,
		FRUBERMTLV2_REFLECTION_ROUGHNESS_MAP, FRUBERMTLV2_REFLECTION_ROUGHNESS, FRUBERMTLV2_REFLECTION_ROUGHNESS_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_REFLECTION_ROUGHNESS, value);

	// REFLECTION ANISOTROPY
	parameters = GetParametersNoColor(FRUBERMTLV2_REFLECTION_ANISO_USEMAP,
		FRUBERMTLV2_REFLECTION_ANISO_MAP, FRUBERMTLV2_REFLECTION_ANISO_MUL);

	std::get<2>(parameters) = Color(1.0f, 1.0f, 1.0f);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_REFLECTION_ANISOTROPY, value);

	// REFLECTION ANISOTROPY ROTATION
	parameters = GetParameters(FRUBERMTLV2_REFLECTION_ANISO_ROT_USEMAP,
		FRUBERMTLV2_REFLECTION_ANISO_ROT_MAP, FRUBERMTLV2_REFLECTION_ANISO_ROT, FRUBERMTLV2_REFLECTION_ANISO_ROT_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_REFLECTION_ANISOTROPY_ROTATION, value);

	// REFLECTION MODE
	rprx_parameter rprxParameter = 0;

	int reflectionMode = GetFromPb<int>(pblock, FRUBERMTLV2_REFLECTION_MODE);

	shader.xSetParameterU(RPRX_UBER_MATERIAL_REFLECTION_MODE, reflectionMode);

	if (RPRX_UBER_MATERIAL_REFLECTION_MODE_PBR == reflectionMode)
	{
		parameters = GetParameters(FRUBERMTLV2_REFLECTION_IOR_USEMAP,
			FRUBERMTLV2_REFLECTION_IOR_MAP, FRUBERMTLV2_REFLECTION_IOR, FRUBERMTLV2_REFLECTION_IOR_MUL);
		rprxParameter = RPRX_UBER_MATERIAL_REFLECTION_IOR;
	}
	else if (RPRX_UBER_MATERIAL_REFLECTION_MODE_METALNESS == reflectionMode)
	{
		parameters = GetParameters(FRUBERMTLV2_REFLECTION_METALNESS_USEMAP,
			FRUBERMTLV2_REFLECTION_METALNESS_MAP, FRUBERMTLV2_REFLECTION_METALNESS, FRUBERMTLV2_REFLECTION_METALNESS_MUL);
		rprxParameter = RPRX_UBER_MATERIAL_REFLECTION_METALNESS;
	}
	else
	{
		// UI is not aligned with the code
		return;
	}

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(rprxParameter, value);
}

void FRMTLCLASSNAME(UberMtlv2)::SetupRefraction(MaterialParser& mtlParser, frw::Shader& shader)
{
	std::tuple<bool, Texmap*, Color, float> parameters = { false, nullptr, Color(0.0f, 0.0f, 0.0f), 0.0f };
	frw::Value value;

	// REFRACTION COLOR
	parameters = GetParameters(FRUBERMTLV2_REFRACTION_COLOR_USEMAP,
		FRUBERMTLV2_REFRACTION_COLOR_MAP, FRUBERMTLV2_REFRACTION_COLOR, FRUBERMTLV2_REFRACTION_COLOR_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOFLAGS);
	shader.xSetValue(RPRX_UBER_MATERIAL_REFRACTION_COLOR, value);

	// REFRACTION WEIGHT
	parameters = GetParameters(FRUBERMTLV2_REFRACTION_WEIGHT_USEMAP,
		FRUBERMTLV2_REFRACTION_WEIGHT_MAP, FRUBERMTLV2_REFRACTION_WEIGHT, FRUBERMTLV2_REFRACTION_WEIGHT_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_REFRACTION_WEIGHT, value);

	// REFRACTION ROUGHNESS
	parameters = GetParameters(FRUBERMTLV2_REFRACTION_ROUGHNESS_USEMAP,
		FRUBERMTLV2_REFRACTION_ROUGHNESS_MAP, FRUBERMTLV2_REFRACTION_ROUGHNESS, FRUBERMTLV2_REFRACTION_ROUGHNESS_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_REFRACTION_ROUGHNESS, value);

	// REFRACTION IOR
	parameters = GetParameters(FRUBERMTLV2_REFRACTION_IOR_USEMAP,
		FRUBERMTLV2_REFRACTION_IOR_MAP, FRUBERMTLV2_REFRACTION_IOR, FRUBERMTLV2_REFRACTION_IOR_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_REFRACTION_IOR, value);

	// REFRACTION THIN SURFACE
	BOOL bThinSuraface = GetFromPb<BOOL>(pblock, FRUBERMTLV2_REFRACTION_THIN_SURFACE);
	shader.xSetParameterU(RPRX_UBER_MATERIAL_REFRACTION_THIN_SURFACE, bThinSuraface);

	// REFRACTION IOR MODE
	BOOL linked = GetFromPb<BOOL>(pblock, FRUBERMTLV2_REFRACTION_LINK_TO_REFLECTION);
	rpr_uint paramValue = linked ? RPRX_UBER_MATERIAL_REFRACTION_MODE_LINKED : RPRX_UBER_MATERIAL_REFRACTION_MODE_SEPARATE;

	shader.xSetParameterU(RPRX_UBER_MATERIAL_REFRACTION_IOR_MODE, paramValue);
}

void FRMTLCLASSNAME(UberMtlv2)::SetupCoating(MaterialParser& mtlParser, frw::Shader& shader)
{
	std::tuple<bool, Texmap*, Color, float> parameters = { false, nullptr, Color(0.0f, 0.0f, 0.0f), 0.0f };
	frw::Value value;

	// COATING COLOR
	parameters = GetParameters(FRUBERMTLV2_COAT_COLOR_USEMAP,
		FRUBERMTLV2_COAT_COLOR_MAP, FRUBERMTLV2_COAT_COLOR, FRUBERMTLV2_COAT_COLOR_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOFLAGS);
	shader.xSetValue(RPRX_UBER_MATERIAL_COATING_COLOR, value);

	// COATING WEIGHT
	parameters = GetParameters(FRUBERMTLV2_COAT_WEIGHT_USEMAP,
		FRUBERMTLV2_COAT_WEIGHT_MAP, FRUBERMTLV2_COAT_WEIGHT, FRUBERMTLV2_COAT_WEIGHT_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_COATING_WEIGHT, value);

	// COATING ROUGHNESS
	parameters = GetParameters(FRUBERMTLV2_COAT_ROUGHNESS_USEMAP,
		FRUBERMTLV2_COAT_ROUGHNESS_MAP, FRUBERMTLV2_COAT_ROUGHNESS, FRUBERMTLV2_COAT_ROUGHNESS_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_COATING_ROUGHNESS, value);

	// COATING REFLECTION MODE
	rprx_parameter rprxParameter = 0;

	int coatingMode = GetFromPb<int>(pblock, FRUBERMTLV2_COAT_MODE);
	shader.xSetParameterU(RPRX_UBER_MATERIAL_COATING_MODE, coatingMode);

	if (coatingMode == RPRX_UBER_MATERIAL_COATING_MODE_PBR)
	{
		// IOR
		parameters = GetParameters(FRUBERMTLV2_COAT_IOR_USEMAP,
			FRUBERMTLV2_COAT_IOR_MAP, FRUBERMTLV2_COAT_IOR, FRUBERMTLV2_COAT_IOR_MUL);
		rprxParameter = RPRX_UBER_MATERIAL_COATING_IOR;
	}
	else if (coatingMode == RPRX_UBER_MATERIAL_COATING_MODE_METALNESS)
	{
		// METALNESS
		parameters = GetParameters(FRUBERMTLV2_COAT_METALNESS_USEMAP,
			FRUBERMTLV2_COAT_METALNESS_MAP, FRUBERMTLV2_COAT_METALNESS, FRUBERMTLV2_COAT_METALNESS_MUL);
		rprxParameter = RPRX_UBER_MATERIAL_COATING_METALNESS;
	}
	else
	{
		// UI is not aligned with the code
		return;
	}

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(rprxParameter, value);
}

void FRMTLCLASSNAME(UberMtlv2)::SetupSSS(MaterialParser& mtlParser, frw::Shader& shader)
{
	std::tuple<bool, Texmap*, Color, float> parameters = { false, nullptr, Color(0.0f, 0.0f, 0.0f), 0.0f };
	frw::Value value;

	// SSS COLOR
	parameters = GetParameters(FRUBERMTLV2_SSS_SUBSURFACE_COLOR_USEMAP,
		FRUBERMTLV2_SSS_SUBSURFACE_COLOR_MAP, FRUBERMTLV2_SSS_SUBSURFACE_COLOR, FRUBERMTLV2_SSS_SUBSURFACE_COLOR_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOFLAGS);
	shader.xSetValue(RPRX_UBER_MATERIAL_SSS_SUBSURFACE_COLOR, value);

	// SSS WEIGHT
	parameters = GetParameters(FRUBERMTLV2_SSS_WEIGHT_USEMAP,
		FRUBERMTLV2_SSS_WEIGHT_MAP, FRUBERMTLV2_SSS_WEIGHT, FRUBERMTLV2_SSS_WEIGHT_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_SSS_WEIGHT, value);

	// SSS SCATTER COLOR
	parameters = GetParameters(FRUBERMTLV2_SSS_SCATTER_COLOR_USEMAP,
		FRUBERMTLV2_SSS_SCATTER_COLOR_MAP, FRUBERMTLV2_SSS_SCATTER_COLOR, FRUBERMTLV2_SSS_SCATTER_COLOR_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOFLAGS);
	shader.xSetValue(RPRX_UBER_MATERIAL_SSS_SCATTER_COLOR, value);
	
	// SSS SCATTER AMOUNT
	parameters = GetParametersNoColor(FRUBERMTLV2_SSS_SCATTER_AMOUNT_USEMAP,
		FRUBERMTLV2_SSS_SCATTER_AMOUNT_MAP, FRUBERMTLV2_SSS_SCATTER_AMOUNT_MUL);
	
	std::get<2>(parameters) = Color(1.0f, 1.0f, 1.0f);
	
	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_SSS_SCATTER_DISTANCE, value);

	// SSS DIRECTION
	parameters = GetParametersNoColor(FRUBERMTLV2_SSS_DIRECTION_USEMAP,
		FRUBERMTLV2_SSS_DIRECTION_MAP, FRUBERMTLV2_SSS_DIRECTION_MUL);

	std::get<2>(parameters) = Color(1.0f, 1.0f, 1.0f);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_SSS_SCATTER_DIRECTION, value);

	// SSS SINGLESCATTERING
	BOOL bSingleScattering = GetFromPb<BOOL>(pblock, FRUBERMTLV2_SSS_SINGLESCATTERING);
	shader.xSetParameterU(RPRX_UBER_MATERIAL_SSS_MULTISCATTER, bSingleScattering ? 0 : 1);

	// SSS ABSORPTION
	parameters = GetParameters(FRUBERMTLV2_SSS_ABSORPTION_USEMAP,
		FRUBERMTLV2_SSS_ABSORPTION_MAP, FRUBERMTLV2_SSS_ABSORPTION, FRUBERMTLV2_SSS_ABSORPTION_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOFLAGS);
	shader.xSetValue(RPRX_UBER_MATERIAL_SSS_ABSORPTION_COLOR, value);
	
	// SSS ABSORPTION DISTANCE
	parameters = GetParametersNoColor(FRUBERMTLV2_SSS_ABSORPTION_DIST_USEMAP,
		FRUBERMTLV2_SSS_ABSORPTION_DIST_MAP, FRUBERMTLV2_SSS_ABSORPTION_DIST_MUL);

	std::get<2>(parameters) = Color(1.0f, 1.0f, 1.0f);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_SSS_ABSORPTION_DISTANCE, value);
}

void FRMTLCLASSNAME(UberMtlv2)::SetupEmissive(MaterialParser& mtlParser, frw::Shader& shader)
{
	std::tuple<bool, Texmap*, Color, float> parameters = { false, nullptr, Color(0.0f, 0.0f, 0.0f), 0.0f };
	frw::Value value;

	// EMISSIVE COLOR
	parameters = GetParameters(FRUBERMTLV2_EMISSIVE_COLOR_USEMAP,
		FRUBERMTLV2_EMISSIVE_COLOR_MAP, FRUBERMTLV2_EMISSIVE_COLOR, FRUBERMTLV2_EMISSIVE_COLOR_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOFLAGS);
	shader.xSetValue(RPRX_UBER_MATERIAL_EMISSION_COLOR, value);

	// EMISSIVE WEIGHT
	parameters = GetParameters(FRUBERMTLV2_EMISSIVE_WEIGHT_USEMAP,
		FRUBERMTLV2_EMISSIVE_WEIGHT_MAP, FRUBERMTLV2_EMISSIVE_WEIGHT, FRUBERMTLV2_EMISSIVE_WEIGHT_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	shader.xSetValue(RPRX_UBER_MATERIAL_EMISSION_WEIGHT, value);

	// EMISSIVE THIN SURFACE
	BOOL bDoubleSided = GetFromPb<BOOL>(pblock, FRUBERMTLV2_EMISSIVE_DOUBLESIDED);
	rpr_uint paramValue = bDoubleSided ? RPRX_UBER_MATERIAL_EMISSION_MODE_DOUBLESIDED : RPRX_UBER_MATERIAL_EMISSION_MODE_SINGLESIDED;
	shader.xSetParameterU(RPRX_UBER_MATERIAL_EMISSION_MODE, paramValue);
}

void FRMTLCLASSNAME(UberMtlv2)::SetupMaterial(MaterialParser& mtlParser, frw::Shader& shader)
{
	std::tuple<bool, Texmap*, Color, float> parameters = { false, nullptr, Color(0.0f, 0.0f, 0.0f), 0.0f };
	frw::Value value;

	// MATERIAL OPACITY
	parameters = GetParametersNoColor(FRUBERMTLV2_MAT_OPACITY_USEMAP,
		FRUBERMTLV2_MAT_OPACITY_MAP, FRUBERMTLV2_MAT_OPACITY_MUL);

	std::get<2>(parameters) = Color(1.0f, 1.0f, 1.0f);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);

	value = mtlParser.materialSystem.ValueMin(value, frw::Value(1)); // clamp to 1
	value = mtlParser.materialSystem.ValueSub(frw::Value(1), value); // Conver opacity to transparency

	shader.xSetValue(RPRX_UBER_MATERIAL_TRANSPARENCY, value);

	// MATERIAL NORMAL
	parameters = GetParameters(FRUBERMTLV2_MAT_NORMAL_USEMAP,
		FRUBERMTLV2_MAT_NORMAL_MAP, FRUBERMTLV2_MAT_NORMAL, FRUBERMTLV2_MAT_NORMAL_MUL);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA | MAP_FLAG_NORMALMAP);

	if ( value.IsNode() ) // a map must be connected
		shader.xSetValue(RPRX_UBER_MATERIAL_NORMAL, value);
	
	// MATERIAL DISPLACE
	parameters = GetParametersNoColor(FRUBERMTLV2_MAT_DISPLACE_USEMAP,
		FRUBERMTLV2_MAT_DISPLACE_MAP, FRUBERMTLV2_MAT_DISPLACE_MUL);

	std::get<2>(parameters) = Color(1.0f, 1.0f, 1.0f);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA);
	
	if ( value.IsNode() ) // a map must be connected
		shader.xSetValue(RPRX_UBER_MATERIAL_DISPLACEMENT, value);

	// MATERIAL BUMP
	parameters = GetParametersNoColor(FRUBERMTLV2_MAT_BUMP_USEMAP,
		FRUBERMTLV2_MAT_BUMP_MAP, FRUBERMTLV2_MAT_BUMP_MUL);

	std::get<2>(parameters) = Color(1.0f, 1.0f, 1.0f);

	value = SetupShaderOrdinary(mtlParser, parameters, MAP_FLAG_NOGAMMA | MAP_FLAG_BUMPMAP);
	
	if (value.IsNode()) // a map must be connected
		shader.xSetValue(RPRX_UBER_MATERIAL_BUMP, value);
}

FIRERENDER_NAMESPACE_END;
