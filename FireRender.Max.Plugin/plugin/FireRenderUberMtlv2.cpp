/*********************************************************************************************************************************
* Radeon ProRender for 3ds Max plugin
* Copyright (c) 2017 AMD
* All Rights Reserved
*
* Radeon ProRender dedicated custom material plugin
*********************************************************************************************************************************/
#include "FireRenderUberMtlv2.h"
#include "Resource.h"
#include "parser\MaterialParser.h"
#include "maxscript\mxsplugin\mxsPlugin.h"
#include <RprSupport.h>

FIRERENDER_NAMESPACE_BEGIN;

IMPLEMENT_FRMTLCLASSDESC(UberMtlv2)

FRMTLCLASSDESCNAME(UberMtlv2) FRMTLCLASSNAME(UberMtlv2)::ClassDescInstance;

// All parameters of the material plugin. See FIRE_MAX_PBDESC definition for notes on backwards compatibility
static ParamBlockDesc2 pbDesc(
	0, _T("UberMtlv2Pbdesc"), 0, &FRMTLCLASSNAME(UberMtlv2)::ClassDescInstance, P_AUTO_CONSTRUCT + P_AUTO_UI + P_VERSION, FIRERENDERMTLVER_LATEST, 0,
	//rollout
	IDD_FIRERENDER_UBERMTLV2, IDS_FR_MTL_UBERV2, 0, 0, NULL,

	// Diffuse Color
	FRUBERMTLV2_DIFFUSE_COLOR_MUL, _T("DiffuseColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.0f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_DIFFUSE_COLOR_MUL, IDC_UBER_DIFFUSE_COLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_DIFFUSE_COLOR, _T("DiffuseColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_DIFFUSE_COLOR, PB_END,

	FRUBERMTLV2_DIFFUSE_COLOR_MAP, _T("DiffuseColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_DIFFUSE_COLOR, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_DIFFUSE_COLOR_T, PB_END,

	FRUBERMTLV2_DIFFUSE_COLOR_USEMAP, _T("DiffuseColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_DIFFUSE_COLOR_USEMAP, PB_END,

	// Diffuse Weight
	FRUBERMTLV2_DIFFUSE_WEIGHT_MUL, _T("DiffuseWeightMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_DIFFUSE_WEIGHT_MUL, IDC_UBER_DIFFUSE_WEIGHT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_DIFFUSE_WEIGHT, _T("DiffuseWeight"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_DIFFUSE_WEIGHT, PB_END,

	FRUBERMTLV2_DIFFUSE_WEIGHT_MAP, _T("DiffuseWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_DIFFUSE_WEIGHT, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_DIFFUSE_WEIGHT_T, PB_END,

	FRUBERMTLV2_DIFFUSE_WEIGHT_USEMAP, _T("DiffuseWeightUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_DIFFUSE_WEIGHT_USEMAP, PB_END,

	// Diffuse Roughness
	FRUBERMTLV2_DIFFUSE_ROUGHNESS_MUL, _T("DiffuseRoughnessMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_DIFFUSE_ROUGHNESS_MUL, IDC_UBER_DIFFUSE_ROUGHNESS_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_DIFFUSE_ROUGHNESS, _T("DiffuseRoughness"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_DIFFUSE_ROUGHNESS, PB_END,

	FRUBERMTLV2_DIFFUSE_ROUGHNESS_MAP, _T("DiffuseRoughnessMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_DIFFUSE_ROUGHNESS, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_DIFFUSE_ROUGHNESS_T, PB_END,

	FRUBERMTLV2_DIFFUSE_ROUGHNESS_USEMAP, _T("DiffuseRoughnessUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_DIFFUSE_ROUGHNESS_USEMAP, PB_END,




	// Reflection Color
	FRUBERMTLV2_REFLECTION_COLOR_MUL, _T("ReflectionColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_COLOR_MUL, IDC_UBER_REFLECTION_COLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_COLOR, _T("ReflectionColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_REFLECTION_COLOR, PB_END,

	FRUBERMTLV2_REFLECTION_COLOR_MAP, _T("ReflectionColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_COLOR, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_COLOR_T, PB_END,

	FRUBERMTLV2_REFLECTION_COLOR_USEMAP, _T("ReflectionColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_COLOR_USEMAP, PB_END,

	// Reflection Weight
	FRUBERMTLV2_REFLECTION_WEIGHT_MUL, _T("ReflectionWeightMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_WEIGHT_MUL, IDC_UBER_REFLECTION_WEIGHT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_WEIGHT, _T("ReflectionWeight"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_REFLECTION_WEIGHT, PB_END,

	FRUBERMTLV2_REFLECTION_WEIGHT_MAP, _T("ReflectionWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_WEIGHT, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_WEIGHT_T, PB_END,

	FRUBERMTLV2_REFLECTION_WEIGHT_USEMAP, _T("ReflectionWeightUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_WEIGHT_USEMAP, PB_END,

	// Reflection Roughness
	FRUBERMTLV2_REFLECTION_ROUGHNESS_MUL, _T("ReflectionRoughnessMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.5f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_ROUGHNESS_MUL, IDC_UBER_REFLECTION_ROUGHNESS_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_ROUGHNESS, _T("ReflectionRoughness"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_REFLECTION_ROUGHNESS, PB_END,

	FRUBERMTLV2_REFLECTION_ROUGHNESS_MAP, _T("ReflectionRoughnessMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_ROUGHNESS, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_ROUGHNESS_T, PB_END,

	FRUBERMTLV2_REFLECTION_ROUGHNESS_USEMAP, _T("ReflectionRoughnessUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_ROUGHNESS_USEMAP, PB_END,

	// Reflection Anisotropy
	FRUBERMTLV2_REFLECTION_ANISO_MUL, _T("ReflectionAnisoMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.0f, p_range, -FLT_MAX, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_ANISO_MUL, IDC_UBER_REFLECTION_ANISO_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_ANISO_MAP, _T("ReflectionAnisoMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_ANISO, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_ANISO_T, PB_END,

	FRUBERMTLV2_REFLECTION_ANISO_USEMAP, _T("ReflectionAnisoUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_ANISO_USEMAP, PB_END,

	// Reflection Anisotropy Rotation
	FRUBERMTLV2_REFLECTION_ANISO_ROT_MUL, _T("ReflectionAnisoRotMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.0f, p_range, 0.f, 1.0, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_ANISO_ROT_MUL, IDC_UBER_REFLECTION_ANISO_ROT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_ANISO_ROT, _T("ReflectionAnisoRot"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_REFLECTION_ANISO_ROT, PB_END,

	FRUBERMTLV2_REFLECTION_ANISO_ROT_MAP, _T("ReflectionAnisoRotMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_ANISO_ROT, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_ANISO_ROT_T, PB_END,

	FRUBERMTLV2_REFLECTION_ANISO_ROT_USEMAP, _T("ReflectionAnisoRotUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_ANISO_ROT_USEMAP, PB_END,

	// Reflection Mode
	FRUBERMTLV2_REFLECTION_MODE, _T("ReflectionMode"), TYPE_INT, P_ANIMATABLE, 0,
	p_default, RPRX_UBER_MATERIAL_REFLECTION_MODE_PBR, p_ui, TYPE_INT_COMBOBOX, IDC_UBER_REFLECTION_MODE, 2, IDS_IOR, IDS_METALNESS,
	p_vals, RPRX_UBER_MATERIAL_REFLECTION_MODE_PBR, RPRX_UBER_MATERIAL_REFLECTION_MODE_METALNESS, PB_END,

	// Reflection IOR
	FRUBERMTLV2_REFLECTION_IOR_MUL, _T("ReflectionIORMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.5f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_IOR_MUL, IDC_UBER_REFLECTION_IOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_IOR, _T("ReflectionIOR"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_REFLECTION_IOR, PB_END,

	FRUBERMTLV2_REFLECTION_IOR_MAP, _T("ReflectionIORMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_IOR, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_IOR_T, PB_END,

	FRUBERMTLV2_REFLECTION_IOR_USEMAP, _T("ReflectionIORUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_IOR_USEMAP, PB_END,

	// Reflection Metalness
	FRUBERMTLV2_REFLECTION_METALNESS_MUL, _T("ReflectionMetalnessMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.0f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFLECTION_METALNESS_MUL, IDC_UBER_REFLECTION_METALNESS_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFLECTION_METALNESS, _T("ReflectionMetalness"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_REFLECTION_METALNESS, PB_END,

	FRUBERMTLV2_REFLECTION_METALNESS_MAP, _T("ReflectionMetalnessMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFLECTION_METALNESS, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_REFLECTION_METALNESS_T, PB_END,

	FRUBERMTLV2_REFLECTION_METALNESS_USEMAP, _T("ReflectionMetalnessUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_REFLECTION_METALNESS_USEMAP, PB_END,




	// Refraction Color
	FRUBERMTLV2_REFRACTION_COLOR_MUL, _T("RefractionColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFRACTION_COLOR_MUL, IDC_UBER_REFRACTION_COLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFRACTION_COLOR, _T("RefractionColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_REFRACTION_COLOR, PB_END,

	FRUBERMTLV2_REFRACTION_COLOR_MAP, _T("RefractionColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFRACTION_COLOR, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_REFRACTION_COLOR_T, PB_END,

	FRUBERMTLV2_REFRACTION_COLOR_USEMAP, _T("RefractionColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_REFRACTION_COLOR_USEMAP, PB_END,

	// Refraction Weight
	FRUBERMTLV2_REFRACTION_WEIGHT_MUL, _T("RefractionWeightMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFRACTION_WEIGHT_MUL, IDC_UBER_REFRACTION_WEIGHT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFRACTION_WEIGHT, _T("RefractionWeight"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_REFRACTION_WEIGHT, PB_END,

	FRUBERMTLV2_REFRACTION_WEIGHT_MAP, _T("RefractionWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFRACTION_WEIGHT, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_REFRACTION_WEIGHT_T, PB_END,

	FRUBERMTLV2_REFRACTION_WEIGHT_USEMAP, _T("RefractionWeightUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_REFRACTION_WEIGHT_USEMAP, PB_END,

	// Refraction Roughness
	FRUBERMTLV2_REFRACTION_ROUGHNESS_MUL, _T("RefractionRoughnessMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.5f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFRACTION_ROUGHNESS_MUL, IDC_UBER_REFRACTION_ROUGHNESS_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFRACTION_ROUGHNESS, _T("RefractionRoughness"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_REFRACTION_ROUGHNESS, PB_END,

	FRUBERMTLV2_REFRACTION_ROUGHNESS_MAP, _T("RefractionRoughnessMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFRACTION_ROUGHNESS, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_REFRACTION_ROUGHNESS_T, PB_END,

	FRUBERMTLV2_REFRACTION_ROUGHNESS_USEMAP, _T("RefractionRoughnessUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_REFRACTION_ROUGHNESS_USEMAP, PB_END,

	// Refraction IOR
	FRUBERMTLV2_REFRACTION_IOR_MUL, _T("RefractionIORMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.5f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_REFRACTION_IOR_MUL, IDC_UBER_REFRACTION_IOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_REFRACTION_IOR, _T("RefractionIOR"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_REFRACTION_IOR, PB_END,

	FRUBERMTLV2_REFRACTION_IOR_MAP, _T("RefractionIORMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_REFRACTION_IOR, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_REFRACTION_IOR_T, PB_END,

	FRUBERMTLV2_REFRACTION_IOR_USEMAP, _T("RefractionIORUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_REFRACTION_IOR_USEMAP, PB_END,

	// Refraction Thin Surface
	FRUBERMTLV2_REFRACTION_THIN_SURFACE, _T("RefractionThinSurface"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_REFRACTION_THIN_SURFACE, PB_END,

	// Refraction link to Reflection
	FRUBERMTLV2_REFRACTION_LINK_TO_REFLECTION, _T("LinkToReflection"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_REFRACTION_LINK_TO_REFLECTION, PB_END,




	// Coat Color
	FRUBERMTLV2_COAT_COLOR_MUL, _T("CoatColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_COAT_COLOR_MUL, IDC_UBER_COAT_COLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_COAT_COLOR, _T("CoatColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_COAT_COLOR, PB_END,

	FRUBERMTLV2_COAT_COLOR_MAP, _T("CoatColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_COAT_COLOR, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_COAT_COLOR_T, PB_END,

	FRUBERMTLV2_COAT_COLOR_USEMAP, _T("CoatColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_COAT_COLOR_USEMAP, PB_END,

	// Coat Weight
	FRUBERMTLV2_COAT_WEIGHT_MUL, _T("CoatWeightMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_COAT_WEIGHT_MUL, IDC_UBER_COAT_WEIGHT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_COAT_WEIGHT, _T("CoatWeight"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_COAT_WEIGHT, PB_END,

	FRUBERMTLV2_COAT_WEIGHT_MAP, _T("CoatWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_COAT_WEIGHT, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_COAT_WEIGHT_T, PB_END,

	FRUBERMTLV2_COAT_WEIGHT_USEMAP, _T("CoatWeightUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_COAT_WEIGHT_USEMAP, PB_END,

	// Coat Roughness
	FRUBERMTLV2_COAT_ROUGHNESS_MUL, _T("CoatRoughnessMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.0f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_COAT_ROUGHNESS_MUL, IDC_UBER_COAT_ROUGHNESS_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_COAT_ROUGHNESS, _T("CoatRoughness"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_COAT_ROUGHNESS, PB_END,

	FRUBERMTLV2_COAT_ROUGHNESS_MAP, _T("CoatRoughnessMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_COAT_ROUGHNESS, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_COAT_ROUGHNESS_T, PB_END,

	FRUBERMTLV2_COAT_ROUGHNESS_USEMAP, _T("CoatRoughnessUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_COAT_ROUGHNESS_USEMAP, PB_END,

#ifdef CODE_TO_PORT
	// Coat Normal
	FRUBERMTLV2_COAT_NORMAL_MUL, _T("CoatColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_COAT_NORMAL_MUL, IDC_UBER_COAT_NORMAL_MUL_S, SPIN_AUTOSCALE, PB_END,
	
	FRUBERMTLV2_COAT_NORMAL_MAP, _T("CoatNormalTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_COAT_NORMAL, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_COAT_NORMAL_T, PB_END,
	
	FRUBERMTLV2_COAT_NORMAL_USEMAP, _T("CoatNormalUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_COAT_NORMAL_USEMAP, PB_END,
#endif

	// Coat Mode
	FRUBERMTLV2_COAT_MODE, _T("CoatMode"), TYPE_INT, P_ANIMATABLE, 0,
	p_default, RPRX_UBER_MATERIAL_COATING_MODE_PBR, p_ui, TYPE_INT_COMBOBOX, IDC_UBER_COAT_MODE, 2, IDS_IOR, IDS_METALNESS,
	p_vals, RPRX_UBER_MATERIAL_COATING_MODE_PBR, RPRX_UBER_MATERIAL_COATING_MODE_METALNESS, PB_END,

	// Coat IOR
	FRUBERMTLV2_COAT_IOR_MUL, _T("CoatIORMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.5f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_COAT_IOR_MUL, IDC_UBER_COAT_IOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_COAT_IOR, _T("CoatIOR"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_COAT_IOR, PB_END,

	FRUBERMTLV2_COAT_IOR_MAP, _T("CoatIORMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_COAT_IOR, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_COAT_IOR_T, PB_END,

	FRUBERMTLV2_COAT_IOR_USEMAP, _T("CoatIORUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_COAT_IOR_USEMAP, PB_END,

	// Coat Metalness
	FRUBERMTLV2_COAT_METALNESS_MUL, _T("CoatMetalnessMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.0f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_COAT_METALNESS_MUL, IDC_UBER_COAT_METALNESS_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_COAT_METALNESS, _T("CoatMetalness"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_COAT_METALNESS, PB_END,

	FRUBERMTLV2_COAT_METALNESS_MAP, _T("CoatMetalnessMap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_COAT_METALNESS, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_COAT_METALNESS_T, PB_END,

	FRUBERMTLV2_COAT_METALNESS_USEMAP, _T("CoatMetalnessUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_COAT_METALNESS_USEMAP, PB_END,




	// Use SSS Diffuse Color
	FRUBERMTLV2_USE_SSS_DIFFUSE_COLOR, _T("UseSSSDiffuseColor"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_USE_DIFFUSE_COLOR, PB_END,

	// SSS Sub-Surface Color
	FRUBERMTLV2_SSS_SUBSURFACE_COLOR_MUL, _T("SSSSubSurfaceColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_SUBSURFACE_COLOR_MUL, IDC_UBER_SSS_SUBSURFACE_COLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_SUBSURFACE_COLOR, _T("SSSSubSurfaceColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_SSS_SUBSURFACE_COLOR, PB_END,

	FRUBERMTLV2_SSS_SUBSURFACE_COLOR_MAP, _T("SSSColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_SUBSURFACE_COLOR, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_SUBSURFACE_COLOR_T, PB_END,

	FRUBERMTLV2_SSS_SUBSURFACE_COLOR_USEMAP, _T("SSSSubSurfaceColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_SUBSURFACE_COLOR_USEMAP, PB_END,

	// SSS Weight
	FRUBERMTLV2_SSS_WEIGHT_MUL, _T("SSSWeightMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_WEIGHT_MUL, IDC_UBER_SSS_WEIGHT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_WEIGHT, _T("SSSWeight"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_SSS_WEIGHT, PB_END,

	FRUBERMTLV2_SSS_WEIGHT_MAP, _T("SSSWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_WEIGHT, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_WEIGHT_T, PB_END,

	FRUBERMTLV2_SSS_WEIGHT_USEMAP, _T("SSSWeightUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_WEIGHT_USEMAP, PB_END,

	// SSS Scatter Color
	FRUBERMTLV2_SSS_SCATTER_COLOR_MUL, _T("SSSScatterColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_SCATTERCOLOR_MUL, IDC_UBER_SSS_SCATTERCOLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_SCATTER_COLOR, _T("SSSScatterColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_SSS_SCATTERCOLOR, PB_END,

	FRUBERMTLV2_SSS_SCATTER_COLOR_MAP, _T("SSSScatterColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_SCATTER_COLOR, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_SCATTERCOLOR_T, PB_END,

	FRUBERMTLV2_SSS_SCATTER_COLOR_USEMAP, _T("SSSScatterColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_SCATTERCOLOR_USEMAP, PB_END,

	// SSS Scatter Amount
	FRUBERMTLV2_SSS_SCATTER_AMOUNT_MUL, _T("SSSScatterAmountMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_SCATTERAMOUNT_MUL, IDC_UBER_SSS_SCATTERAMOUNT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_SCATTER_AMOUNT_MAP, _T("SSSScatterAmountTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_SCATTER_AMOUNT, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_SCATTERAMOUNT_T, PB_END,

	FRUBERMTLV2_SSS_SCATTER_AMOUNT_USEMAP, _T("SSSScatterAmountUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_SCATTERAMOUNT_USEMAP, PB_END,

	// SSS Directionality
	FRUBERMTLV2_SSS_DIRECTION_MUL, _T("SSSDirectionalityMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.f, p_range, -FLT_MAX, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_DIRECTION_MUL, IDC_UBER_SSS_DIRECTION_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_DIRECTION_MAP, _T("SSSDirectionTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_DIRECTION, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_DIRECTION_T, PB_END,

	FRUBERMTLV2_SSS_DIRECTION_USEMAP, _T("SSSDirectionUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_DIRECTION_USEMAP, PB_END,

	// SSS SingleScattering
	FRUBERMTLV2_SSS_SINGLESCATTERING, _T("UseSSSSingleScattering"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_SINGLESCATTERING, PB_END,

	// SSS Absorption
	FRUBERMTLV2_SSS_ABSORPTION_MUL, _T("SSSAbsorptionMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_ABSORPTION_MUL, IDC_UBER_SSS_ABSORPTION_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_ABSORPTION, _T("SSSAbsorption"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_SSS_ABSORPTION, PB_END,

	FRUBERMTLV2_SSS_ABSORPTION_MAP, _T("SSSAbsorptionTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_ABSORPTION, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_ABSORPTION_T, PB_END,

	FRUBERMTLV2_SSS_ABSORPTION_USEMAP, _T("SSSAbsorptionUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_ABSORPTION_USEMAP, PB_END,

	// SSS Absorption Distance
	FRUBERMTLV2_SSS_ABSORPTION_DIST_MUL, _T("AbsorptionDistanceMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_SSS_ABSORPTION_DIST_MUL, IDC_UBER_SSS_ABSORPTION_DIST_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_SSS_ABSORPTION_DIST_MAP, _T("SSSAbsorptionDistTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_SSS_ABSORPTION_DIST, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_SSS_ABSORPTION_DIST_T, PB_END,

	FRUBERMTLV2_SSS_ABSORPTION_DIST_USEMAP, _T("SSSAbsorptionDistUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_SSS_ABSORPTION_DIST_USEMAP, PB_END,




	// Emissive Color
	FRUBERMTLV2_EMISSIVE_COLOR_MUL, _T("EmissiveColorMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_EMISSIVE_COLOR_MUL, IDC_UBER_EMISSIVE_COLOR_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_EMISSIVE_COLOR, _T("EmissiveColor"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_EMISSIVE_COLOR, PB_END,

	FRUBERMTLV2_EMISSIVE_COLOR_MAP, _T("EmissiveColorTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_EMISSIVE_COLOR, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_EMISSIVE_COLOR_T, PB_END,

	FRUBERMTLV2_EMISSIVE_COLOR_USEMAP, _T("EmissiveColorUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_EMISSIVE_COLOR_USEMAP, PB_END,

	// Emissive Weight
	FRUBERMTLV2_EMISSIVE_WEIGHT_MUL, _T("EmissiveWeightMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 0.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_EMISSIVE_WEIGHT_MUL, IDC_UBER_EMISSIVE_WEIGHT_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_EMISSIVE_WEIGHT, _T("EmissiveWeight"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.f, 1.f, 1.f), p_ui, TYPE_COLORSWATCH, IDC_UBER_EMISSIVE_WEIGHT, PB_END,

	FRUBERMTLV2_EMISSIVE_WEIGHT_MAP, _T("EmissiveWeightTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_EMISSIVE_WEIGHT, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_EMISSIVE_WEIGHT_T, PB_END,

	FRUBERMTLV2_EMISSIVE_WEIGHT_USEMAP, _T("EmissiveWeightUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_EMISSIVE_WEIGHT_USEMAP, PB_END,

	// Emissive Doublesided
	FRUBERMTLV2_EMISSIVE_DOUBLESIDED, _T("EmissiveDoubleSided"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, FALSE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_EMISSIVE_DOUBLESIDED, PB_END,


	// Material Opacity
	FRUBERMTLV2_MAT_OPACITY_MUL, _T("MaterialOpacityMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_MAT_OPACITY_MUL, IDC_UBER_MAT_OPACITY_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_MAT_OPACITY_MAP, _T("MaterialOpacityTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_MAT_OPACITY, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_MAT_OPACITY_T, PB_END,

	FRUBERMTLV2_MAT_OPACITY_USEMAP, _T("MaterialOpacityUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_MAT_OPACITY_USEMAP, PB_END,

	// Material Normal
	FRUBERMTLV2_MAT_NORMAL_MUL, _T("MaterialNormalMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_MAT_NORMAL_MUL, IDC_UBER_MAT_NORMAL_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_MAT_NORMAL, _T("MaterialNormal"), TYPE_RGBA, P_ANIMATABLE, 0,
	p_default, Color(1.0f, 1.0f, 1.0f), p_ui, TYPE_COLORSWATCH, IDC_UBER_MAT_NORMAL, PB_END,

	FRUBERMTLV2_MAT_NORMAL_MAP, _T("MaterialNormalTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_MAT_NORMAL, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_MAT_NORMAL_T, PB_END,

	FRUBERMTLV2_MAT_NORMAL_USEMAP, _T("MaterialNormalUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_MAT_NORMAL_USEMAP, PB_END,

	// Material Displace
	FRUBERMTLV2_MAT_DISPLACE_MUL, _T("MaterialDisplaceMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_MAT_DISPLACE_MUL, IDC_UBER_MAT_DISPLACE_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_MAT_DISPLACE_MAP, _T("MaterialDisplaceTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_MAT_DISPLACE, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_MAT_DISPLACE_T, PB_END,

	FRUBERMTLV2_MAT_DISPLACE_USEMAP, _T("MaterialDisplaceUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_MAT_DISPLACE_USEMAP, PB_END,

	// Material Bump
	FRUBERMTLV2_MAT_BUMP_MUL, _T("MaterialBumpMul"), TYPE_FLOAT, P_ANIMATABLE, 0,
	p_default, 1.f, p_range, 0.f, FLT_MAX, p_ui, TYPE_SPINNER, EDITTYPE_FLOAT, IDC_UBER_MAT_BUMP_MUL, IDC_UBER_MAT_BUMP_MUL_S, SPIN_AUTOSCALE, PB_END,

	FRUBERMTLV2_MAT_BUMP_MAP, _T("MaterialBumpTexmap"), TYPE_TEXMAP, 0, 0,
	p_subtexno, FRUBERMTLV2_MAP_MAT_BUMP, p_ui, TYPE_TEXMAPBUTTON, IDC_UBER_MAT_BUMP_T, PB_END,

	FRUBERMTLV2_MAT_BUMP_USEMAP, _T("MaterialBumpUseMap"), TYPE_BOOL, P_ANIMATABLE, 0,
	p_default, TRUE, p_ui, TYPE_SINGLECHEKBOX, IDC_UBER_MAT_BUMP_USEMAP, PB_END,

	PB_END
);

std::map<int, std::pair<ParamID, MCHAR*>> FRMTLCLASSNAME(UberMtlv2)::TEXMAP_MAPPING = {
	{ FRUBERMTLV2_MAP_DIFFUSE_COLOR,{ FRUBERMTLV2_DIFFUSE_COLOR_MAP, _T("Diffuse Color") } },
	{ FRUBERMTLV2_MAP_DIFFUSE_WEIGHT,{ FRUBERMTLV2_DIFFUSE_WEIGHT_MAP, _T("Diffuse Weight") } },
	{ FRUBERMTLV2_MAP_DIFFUSE_ROUGHNESS,{ FRUBERMTLV2_DIFFUSE_ROUGHNESS_MAP, _T("Diffuse Roughness") } },
	{ FRUBERMTLV2_MAP_REFLECTION_COLOR,{ FRUBERMTLV2_REFLECTION_COLOR_MAP, _T("Reflection Color") } },
	{ FRUBERMTLV2_MAP_REFLECTION_WEIGHT,{ FRUBERMTLV2_REFLECTION_WEIGHT_MAP, _T("Reflection Weight") } },
	{ FRUBERMTLV2_MAP_REFLECTION_ROUGHNESS,{ FRUBERMTLV2_REFLECTION_ROUGHNESS_MAP, _T("Reflection Roughness") } },
	{ FRUBERMTLV2_MAP_REFLECTION_ANISO,{ FRUBERMTLV2_REFLECTION_ANISO_MAP, _T("Reflection Anisotropy") } },
	{ FRUBERMTLV2_MAP_REFLECTION_ANISO_ROT,{ FRUBERMTLV2_REFLECTION_ANISO_ROT_MAP, _T("Reflection Anisotropy Rotation") } },
	{ FRUBERMTLV2_MAP_REFLECTION_IOR,{ FRUBERMTLV2_REFLECTION_IOR_MAP, _T("Reflection IOR") } },
	{ FRUBERMTLV2_MAP_REFLECTION_METALNESS,{ FRUBERMTLV2_REFLECTION_METALNESS_MAP, _T("Reflection Metalness") } },

	{ FRUBERMTLV2_MAP_REFRACTION_COLOR,{ FRUBERMTLV2_REFRACTION_COLOR_MAP, _T("Refraction Color") } },
	{ FRUBERMTLV2_MAP_REFRACTION_WEIGHT,{ FRUBERMTLV2_REFRACTION_WEIGHT_MAP, _T("Refraction Weight") } },
	{ FRUBERMTLV2_MAP_REFRACTION_ROUGHNESS,{ FRUBERMTLV2_REFRACTION_ROUGHNESS_MAP, _T("Refraction Roughness") } },
	{ FRUBERMTLV2_MAP_REFRACTION_IOR,{ FRUBERMTLV2_REFRACTION_IOR_MAP, _T("Refraction IOR") } },

	{ FRUBERMTLV2_MAP_COAT_COLOR,{ FRUBERMTLV2_COAT_COLOR_MAP, _T("Coat Color") } },
	{ FRUBERMTLV2_MAP_COAT_WEIGHT,{ FRUBERMTLV2_COAT_WEIGHT_MAP, _T("Coat Weight") } },
	{ FRUBERMTLV2_MAP_COAT_ROUGHNESS,{ FRUBERMTLV2_COAT_ROUGHNESS_MAP, _T("Coat Roughness") } },
	{ FRUBERMTLV2_MAP_COAT_IOR,{ FRUBERMTLV2_COAT_IOR_MAP, _T("Coat IOR") } },
	{ FRUBERMTLV2_MAP_COAT_METALNESS,{ FRUBERMTLV2_COAT_METALNESS_MAP, _T("Coat Metalness") } },

	{ FRUBERMTLV2_MAP_SSS_SUBSURFACE_COLOR,{ FRUBERMTLV2_SSS_SUBSURFACE_COLOR_MAP, _T("Sub-Surface Color") } },
	{ FRUBERMTLV2_MAP_SSS_WEIGHT,{ FRUBERMTLV2_SSS_WEIGHT_MAP, _T("SSS Weight") } },
	{ FRUBERMTLV2_MAP_SSS_SCATTER_COLOR,{ FRUBERMTLV2_SSS_SCATTER_COLOR_MAP, _T("Scatter Color") } },
	{ FRUBERMTLV2_MAP_SSS_SCATTER_AMOUNT,{ FRUBERMTLV2_SSS_SCATTER_AMOUNT_MAP, _T("Scatter Amount") } },
	{ FRUBERMTLV2_MAP_SSS_ABSORPTION,{ FRUBERMTLV2_SSS_ABSORPTION_MAP, _T("Absorption") } },
	{ FRUBERMTLV2_MAP_SSS_ABSORPTION_DIST,{ FRUBERMTLV2_SSS_ABSORPTION_DIST_MAP, _T("Absorption Distance") } },
	{ FRUBERMTLV2_MAP_SSS_DIRECTION,{ FRUBERMTLV2_SSS_DIRECTION_MAP, _T("Scatter Direction") } },

	{ FRUBERMTLV2_MAP_EMISSIVE_COLOR,{ FRUBERMTLV2_EMISSIVE_COLOR_MAP, _T("Emissive Color") } },
	{ FRUBERMTLV2_MAP_EMISSIVE_WEIGHT,{ FRUBERMTLV2_EMISSIVE_WEIGHT_MAP, _T("Emissive Weight") } },

	{ FRUBERMTLV2_MAP_MAT_OPACITY,{ FRUBERMTLV2_MAT_OPACITY_MAP, _T("Material Opacity") } },
	{ FRUBERMTLV2_MAP_MAT_NORMAL,{ FRUBERMTLV2_MAT_NORMAL_MAP, _T("Material Normal") } },
	{ FRUBERMTLV2_MAP_MAT_DISPLACE,{ FRUBERMTLV2_MAT_DISPLACE_MAP, _T("Material Displace") } },
	{ FRUBERMTLV2_MAP_MAT_BUMP,{ FRUBERMTLV2_MAT_BUMP_MAP, _T("Material Bump") } },
};

FRMTLCLASSNAME(UberMtlv2)::~FRMTLCLASSNAME(UberMtlv2)()
{
}

frw::Shader FRMTLCLASSNAME(UberMtlv2)::getVolumeShader(const TimeValue t, MaterialParser& mtlParser, INode* node)
{
	return frw::Shader();
}

frw::Shader FRMTLCLASSNAME(UberMtlv2)::getShader(const TimeValue t, MaterialParser& mtlParser, INode* node)
{
	auto ms = mtlParser.materialSystem;
	frw::Scope& scope = mtlParser.GetScope();

	frw::Shader shader(scope.GetContext(), scope.GetContextEx(), RPRX_MATERIAL_UBER);



	// DIFFUSE
	float mul = 0.0f;
	Color color = Color(0, 0, 0);
	Texmap* map = nullptr;

	if (GetFromPb<float>(pblock, FRUBERMTLV2_DIFFUSE_WEIGHT_MUL) != 0.f)
	{
		// Color
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_DIFFUSE_COLOR_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_DIFFUSE_COLOR);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_DIFFUSE_COLOR_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_DIFFUSE_COLOR_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_DIFFUSE_COLOR, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_DIFFUSE_COLOR, val.r, val.g, val.b, 1.0);
		}

		// Weight
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_DIFFUSE_WEIGHT_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_DIFFUSE_WEIGHT);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_DIFFUSE_WEIGHT_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_DIFFUSE_WEIGHT_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_DIFFUSE_WEIGHT, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_DIFFUSE_WEIGHT, val.r, val.g, val.b, 1.0);
		}

		// Roughness
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_DIFFUSE_ROUGHNESS_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_DIFFUSE_ROUGHNESS);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_DIFFUSE_ROUGHNESS_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_DIFFUSE_ROUGHNESS_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_DIFFUSE_ROUGHNESS, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_DIFFUSE_ROUGHNESS, val.r, val.g, val.b, 1.0);
		}
	}
	else // Disable Diffuse
	{
		shader.xSetParameterF(RPRX_UBER_MATERIAL_DIFFUSE_WEIGHT, 0.f, 0.f, 0.f, 0.f);
	}




	// REFLECTION
	if (GetFromPb<float>(pblock, FRUBERMTLV2_REFLECTION_WEIGHT_MUL) != 0.f)
	{
		// Color
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_REFLECTION_COLOR_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_REFLECTION_COLOR);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_REFLECTION_COLOR_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_REFLECTION_COLOR_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_REFLECTION_COLOR, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_REFLECTION_COLOR, val.r, val.g, val.b, 1.0);
		}

		// Weight
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_REFLECTION_WEIGHT_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_REFLECTION_WEIGHT);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_REFLECTION_WEIGHT_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_REFLECTION_WEIGHT_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_REFLECTION_WEIGHT, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_REFLECTION_WEIGHT, val.r, val.g, val.b, 1.0);
		}

		// Roughness
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_REFLECTION_ROUGHNESS_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_REFLECTION_ROUGHNESS);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_REFLECTION_ROUGHNESS_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_REFLECTION_ROUGHNESS_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_REFLECTION_ROUGHNESS, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_REFLECTION_ROUGHNESS, val.r, val.g, val.b, 1.0);
		}

		// Anisotropy
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_REFLECTION_ANISO_MUL);
		color = Color(1.f, 1.f, 1.f);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_REFLECTION_ANISO_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_REFLECTION_ANISO_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_REFLECTION_ANISOTROPY, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_REFLECTION_ANISOTROPY, val.r, val.g, val.b, 1.0);
		}

		// Anisotropy Rotation
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_REFLECTION_ANISO_ROT_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_REFLECTION_ANISO_ROT);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_REFLECTION_ANISO_ROT_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_REFLECTION_ANISO_ROT_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_REFLECTION_ANISOTROPY_ROTATION, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_REFLECTION_ANISOTROPY_ROTATION, val.r, val.g, val.b, 1.0);
		}

		// Reflection mode
		int reflectionMode = GetFromPb<int>(pblock, FRUBERMTLV2_REFLECTION_MODE);

		shader.xSetParameterU(RPRX_UBER_MATERIAL_REFLECTION_MODE, reflectionMode);
		if (reflectionMode == RPRX_UBER_MATERIAL_REFLECTION_MODE_PBR)
		{
			// IOR
			mul = GetFromPb<float>(pblock, FRUBERMTLV2_REFLECTION_IOR_MUL);
			color = GetFromPb<Color>(pblock, FRUBERMTLV2_REFLECTION_IOR);
			map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_REFLECTION_IOR_MAP);

			if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_REFLECTION_IOR_USEMAP))
			{
				frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
				val = ms.ValueMul(val, mul * color);
				shader.xSetParameterN(RPRX_UBER_MATERIAL_REFLECTION_IOR, val.GetNode());
			}
			else
			{
				Color val = color * mul;
				shader.xSetParameterF(RPRX_UBER_MATERIAL_REFLECTION_IOR, val.r, val.g, val.b, 1.0);
			}
		}
		else if (reflectionMode == RPRX_UBER_MATERIAL_REFLECTION_MODE_METALNESS)
		{
			// Metalness
			mul = GetFromPb<float>(pblock, FRUBERMTLV2_REFLECTION_METALNESS_MUL);
			color = GetFromPb<Color>(pblock, FRUBERMTLV2_REFLECTION_METALNESS);
			map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_REFLECTION_METALNESS_MAP);

			if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_REFLECTION_METALNESS_USEMAP))
			{
				frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
				val = ms.ValueMul(val, mul * color);
				shader.xSetParameterN(RPRX_UBER_MATERIAL_REFLECTION_METALNESS, val.GetNode());
			}
			else
			{
				Color val = color * mul;
				shader.xSetParameterF(RPRX_UBER_MATERIAL_REFLECTION_METALNESS, val.r, val.g, val.b, 1.0);
			}
		}
	}
	else // Disable Reflection
	{
		shader.xSetParameterF(RPRX_UBER_MATERIAL_REFLECTION_WEIGHT, 0.f, 0.f, 0.f, 0.f);
	}




	// REFRACTION
	if (GetFromPb<float>(pblock, FRUBERMTLV2_REFRACTION_WEIGHT_MUL) != 0.f)
	{
		// Color
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_REFRACTION_COLOR_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_REFRACTION_COLOR);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_REFRACTION_COLOR_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_REFRACTION_COLOR_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_REFRACTION_COLOR, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_REFRACTION_COLOR, val.r, val.g, val.b, 1.0);
		}

		// Weight
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_REFRACTION_WEIGHT_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_REFRACTION_WEIGHT);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_REFRACTION_WEIGHT_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_REFRACTION_WEIGHT_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_REFRACTION_WEIGHT, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_REFRACTION_WEIGHT, val.r, val.g, val.b, 1.0);
		}

		// Roughness
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_REFRACTION_ROUGHNESS_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_REFRACTION_ROUGHNESS);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_REFRACTION_ROUGHNESS_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_REFRACTION_ROUGHNESS_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_REFRACTION_ROUGHNESS, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_REFRACTION_ROUGHNESS, val.r, val.g, val.b, 1.0);
		}

		// IOR
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_REFRACTION_IOR_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_REFRACTION_IOR);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_REFRACTION_IOR_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_REFRACTION_IOR_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_REFRACTION_IOR, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_REFRACTION_IOR, val.r, val.g, val.b, 1.0);
		}

		// Thin Surface
		BOOL bThinSuraface = GetFromPb<BOOL>(pblock, FRUBERMTLV2_REFRACTION_THIN_SURFACE);
		shader.xSetParameterU(RPRX_UBER_MATERIAL_REFRACTION_THIN_SURFACE, bThinSuraface);

		// IOR Mode
		BOOL bLinked = GetFromPb<BOOL>(pblock, FRUBERMTLV2_REFRACTION_LINK_TO_REFLECTION);
		shader.xSetParameterU(RPRX_UBER_MATERIAL_REFRACTION_IOR_MODE, bLinked == 1 ? RPRX_UBER_MATERIAL_REFRACTION_MODE_LINKED : RPRX_UBER_MATERIAL_REFRACTION_MODE_SEPARATE);
	}
	else // Disable Refraction
	{
		shader.xSetParameterF(RPRX_UBER_MATERIAL_REFRACTION_WEIGHT, 0.f, 0.f, 0.f, 0.f);
	}




	// COAT
	if (GetFromPb<float>(pblock, FRUBERMTLV2_COAT_WEIGHT_MUL) != 0.f)
	{
		// Color
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_COAT_COLOR_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_COAT_COLOR);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_COAT_COLOR_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_COAT_COLOR_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_COATING_COLOR, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_COATING_COLOR, val.r, val.g, val.b, 1.0);
		}

		// Weight
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_COAT_WEIGHT_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_COAT_WEIGHT);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_COAT_WEIGHT_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_COAT_WEIGHT_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_COATING_WEIGHT, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_COATING_WEIGHT, val.r, val.g, val.b, 1.0);
		}

		// Roughness
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_COAT_ROUGHNESS_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_COAT_ROUGHNESS);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_COAT_ROUGHNESS_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_COAT_ROUGHNESS_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_COATING_ROUGHNESS, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_COATING_ROUGHNESS, val.r, val.g, val.b, 1.0);
		}

		// Reflection mode
		int coatMode = GetFromPb<int>(pblock, FRUBERMTLV2_COAT_MODE);
		shader.xSetParameterU(RPRX_UBER_MATERIAL_COATING_MODE, coatMode);

		if (coatMode == RPRX_UBER_MATERIAL_COATING_MODE_PBR)
		{
			// IOR
			mul = GetFromPb<float>(pblock, FRUBERMTLV2_COAT_IOR_MUL);
			color = GetFromPb<Color>(pblock, FRUBERMTLV2_COAT_IOR);
			map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_COAT_IOR_MAP);

			if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_COAT_IOR_USEMAP))
			{
				frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
				val = ms.ValueMul(val, mul * color);
				shader.xSetParameterN(RPRX_UBER_MATERIAL_COATING_IOR, val.GetNode());
			}
			else
			{
				Color val = color * mul;
				shader.xSetParameterF(RPRX_UBER_MATERIAL_COATING_IOR, val.r, val.g, val.b, 1.0);
			}
		}
		else if (coatMode == RPRX_UBER_MATERIAL_COATING_MODE_METALNESS)
		{
			// Metalness
			mul = GetFromPb<float>(pblock, FRUBERMTLV2_COAT_METALNESS_MUL);
			color = GetFromPb<Color>(pblock, FRUBERMTLV2_COAT_METALNESS);
			map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_COAT_METALNESS_MAP);

			if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_COAT_METALNESS_USEMAP))
			{
				frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
				val = ms.ValueMul(val, mul * color);
				shader.xSetParameterN(RPRX_UBER_MATERIAL_COATING_METALNESS, val.GetNode());
			}
			else
			{
				Color val = color * mul;
				shader.xSetParameterF(RPRX_UBER_MATERIAL_COATING_METALNESS, val.r, val.g, val.b, 1.0);
			}
		}
	}
	else // Disable Refraction
	{
		shader.xSetParameterF(RPRX_UBER_MATERIAL_COATING_WEIGHT, 0.f, 0.f, 0.f, 0.f);
	}



	// SSS
	if (GetFromPb<float>(pblock, FRUBERMTLV2_SSS_WEIGHT_MUL) != 0.f)
	{
		// Sub-Surface Color
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_SSS_SUBSURFACE_COLOR_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_SSS_SUBSURFACE_COLOR);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_SSS_SUBSURFACE_COLOR_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_SSS_SUBSURFACE_COLOR_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_SSS_SUBSURFACE_COLOR, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_SSS_SUBSURFACE_COLOR, val.r, val.g, val.b, 1.0);
		}

		// Weight
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_SSS_WEIGHT_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_SSS_WEIGHT);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_SSS_WEIGHT_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_SSS_WEIGHT_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_SSS_WEIGHT, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_SSS_WEIGHT, val.r, val.g, val.b, 1.0);
		}

		// Scatter Color
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_SSS_SCATTER_COLOR_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_SSS_SCATTER_COLOR);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_SSS_SCATTER_COLOR_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_SSS_SCATTER_COLOR_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_SSS_SCATTER_COLOR, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_SSS_SCATTER_COLOR, val.r, val.g, val.b, 1.0);
		}

		// Scatter Amount
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_SSS_SCATTER_AMOUNT_MUL);
		color = Color(1.f, 1.f, 1.f);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_SSS_SCATTER_AMOUNT_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_SSS_SCATTER_AMOUNT_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_SSS_SCATTER_DISTANCE, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_SSS_SCATTER_DISTANCE, val.r, val.g, val.b, 1.0);
		}


		// Direction
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_SSS_DIRECTION_MUL);
		color = Color(1.f, 1.f, 1.f);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_SSS_DIRECTION_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_SSS_DIRECTION_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_SSS_SCATTER_DISTANCE, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_SSS_SCATTER_DIRECTION, val.r, val.g, val.b, 1.0);
		}


		// SingleScattering
		BOOL bSingleScattering = GetFromPb<BOOL>(pblock, FRUBERMTLV2_SSS_SINGLESCATTERING);
		shader.xSetParameterU(RPRX_UBER_MATERIAL_SSS_MULTISCATTER, bSingleScattering ? 0 : 1);


		// Absorption
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_SSS_ABSORPTION_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_SSS_ABSORPTION);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_SSS_ABSORPTION_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_SSS_ABSORPTION_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_SSS_ABSORPTION_COLOR, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_SSS_ABSORPTION_COLOR, val.r, val.g, val.b, 1.0);
		}

		// Absorption Distance
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_SSS_ABSORPTION_DIST_MUL);
		color = Color(1.f, 1.f, 1.f);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_SSS_DIRECTION_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_SSS_DIRECTION_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_SSS_SCATTER_DISTANCE, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_SSS_ABSORPTION_DISTANCE, val.r, val.g, val.b, 1.0);
		}
	}
	else // Disable SSS
	{
		shader.xSetParameterF(RPRX_UBER_MATERIAL_SSS_WEIGHT, 0.f, 0.f, 0.f, 0.f);
	}




	// EMISSIVE
	if (GetFromPb<float>(pblock, FRUBERMTLV2_EMISSIVE_WEIGHT_MUL) != 0.f)
	{
		// Color
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_EMISSIVE_COLOR_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_EMISSIVE_COLOR);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_EMISSIVE_COLOR_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_EMISSIVE_COLOR_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_EMISSION_COLOR, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_EMISSION_COLOR, val.r, val.g, val.b, 1.0);
		}

		// Weight
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_EMISSIVE_WEIGHT_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_EMISSIVE_WEIGHT);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_EMISSIVE_WEIGHT_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_EMISSIVE_WEIGHT_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_EMISSION_WEIGHT, val.GetNode());
		}
		else
		{
			Color val = color * mul;
			shader.xSetParameterF(RPRX_UBER_MATERIAL_EMISSION_WEIGHT, val.r, val.g, val.b, 1.0);
		}

		// Thin Surface
		BOOL bDoubleSided = GetFromPb<BOOL>(pblock, FRUBERMTLV2_EMISSIVE_DOUBLESIDED);
		shader.xSetParameterU(RPRX_UBER_MATERIAL_EMISSION_MODE, bDoubleSided ? RPRX_UBER_MATERIAL_EMISSION_MODE_DOUBLESIDED : RPRX_UBER_MATERIAL_EMISSION_MODE_SINGLESIDED);
	}
	else // Disable Emissive
	{
		shader.xSetParameterF(RPRX_UBER_MATERIAL_EMISSION_WEIGHT, 0.f, 0.f, 0.f, 0.f);
	}




	// Material
	{
		//  Opacity
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_MAT_OPACITY_MUL);
		color = Color(1.f, 1.f, 1.f);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_MAT_OPACITY_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_MAT_OPACITY_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);

			val = ms.ValueMul(val, mul); // multiplier
			val = ms.ValueMin(val, frw::Value(1)); // clamp to 1
			val = ms.ValueSub(frw::Value(1), val); // Conver opacity to transparency

			shader.xSetParameterN(RPRX_UBER_MATERIAL_TRANSPARENCY, val.GetNode());
		}
		else
		{
			Color val = color * mul; // multiplier
			val.ClampMinMax(); // clamp to [0, 1]
			val = Color(1, 1, 1) - val; // Convert opacity to transparency

			shader.xSetParameterF(RPRX_UBER_MATERIAL_TRANSPARENCY, val.r, val.g, val.b, 1.0);
		}

		// Normal
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_MAT_NORMAL_MUL);
		color = GetFromPb<Color>(pblock, FRUBERMTLV2_MAT_NORMAL);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_MAT_NORMAL_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_MAT_NORMAL_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_NORMAL, val.GetNode());
		}

		// Displace
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_MAT_DISPLACE_MUL);
		color = Color(1.f, 1.f, 1.f);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_MAT_DISPLACE_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_MAT_DISPLACE_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_DISPLACEMENT, val.GetNode());
		}

		// Bump
		mul = GetFromPb<float>(pblock, FRUBERMTLV2_MAT_BUMP_MUL);
		color = Color(1.f, 1.f, 1.f);
		map = GetFromPb<Texmap*>(pblock, FRUBERMTLV2_MAT_BUMP_MAP);

		if (map && GetFromPb<bool>(pblock, FRUBERMTLV2_MAT_BUMP_USEMAP))
		{
			frw::Value val = mtlParser.createMap(map, MAP_FLAG_NOGAMMA);
			val = ms.ValueMul(val, mul * color);
			shader.xSetParameterN(RPRX_UBER_MATERIAL_BUMP, val.GetNode());
		}
	}

	return shader;
}

FIRERENDER_NAMESPACE_END;