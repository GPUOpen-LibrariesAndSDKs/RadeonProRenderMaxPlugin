/*********************************************************************************************************************************
* Radeon ProRender for 3ds Max plugin
* Copyright (C) 2017 AMD
* All Rights Reserved
*
* Convenient declarations of IDs for known Corona objects and materials
*********************************************************************************************************************************/

#pragma once
#include <iFnPub.h>


#define CORONA_NAMESPACE_BEGIN namespace Corona {
#define CORONA_NAMESPACE_END }


CORONA_NAMESPACE_BEGIN;

//////////////////////////////////////////////////////////////////////////////
// CLASS IDs

// Materials
const Class_ID MTL_CID(0x70be6506, 0x448931dd);
const Class_ID LIGHT_MTL_CID(0x53b7717a, 0x500D5093);
const Class_ID PORTAL_MTL_CID(0x76666506, 0x448ADE9d);
const Class_ID RAY_SWITCH_MTL_CID(0x6816116A, 0xABE651DE);
const Class_ID VOLUME_MTL_CID(0x39874782, 0x378CDE97);
const Class_ID SHADOW_CATCHER_MTL_CID(0x398ACEAD, 0xACDC3625);
const Class_ID LAYERED_MTL_CID(0x65486584, 0x8425554E);

// Objects
const Class_ID LIGHT_CID(0x423045e5, 0x294c5879);
const Class_ID VOLUME_OBJECT_CID(0xa81b220e, 0x7964d0a3);
const Class_ID SUN_OBJECT_CID(0x7c3a3c80, 0x09cf576f);
const Class_ID SCATTER_CID(0x63b20069, 0x325e5220);
const Class_ID PROXY_CID(0x2b0264bc, 0x05ec07f5);

// Texmaps
const Class_ID WIRE_TEX_CID(0x6520786f, 0x321045b4);
const Class_ID MIX_TEX_CID(0x6847286f, 0x3FFFAAb4);
const Class_ID COLOR_TEX_CID(0x68426DCa, 0x372362D4);
const Class_ID OUTPUT_TEX_CID(0x81426Dc9, 0x37843900);
const Class_ID FRONT_BACK_TEX_CID(0xABCD2067, 0x8723545d);
const Class_ID NORMAL_TEX_CID(0x2870CEAA, 0xCC18437C);
const Class_ID FRACTAL_TEX_CID(0x4f64749d, 0x11711d2b);
const Class_ID COLOR_MAPPER_TEX_CID(0x768ec55b, 0xe1a705de);
const Class_ID SKY_TEX_CID(0x59577962, 0x4cab7ac1);
const Class_ID AO_TEX_CID(0x26ea4249, 0x404b4b59);
const Class_ID RAY_SWITCH_TEX_CID(0x26581A55, 0x5E138D35);
const Class_ID DATA_TEX_CID(0xACE84000, 0x0486165E);
const Class_ID MULTIMAP_TEX_CID(0xBABA3487, 0x30782624);
const Class_ID BITMAP_TEX_CID(0xabba5784, 0x65484244);

// Misc.
const Class_ID CAMERA_MOD_CID(0xA387449C, 0x1DEDED8F);
const Class_ID SHADOWS_CID(0x28704565, 0xCC151275);

//////////////////////////////////////////////////////////////////////////////
// Scatter

#define SCATTER_FP_INTERFACE Interface_ID(0x5784ADE, 0x6ACE5785)

#define GetScatterOpsInterface(cd) ((::Corona::ScatterFpOps*)(cd)->GetInterface(SCATTER_FP_INTERFACE))

enum ScatterFpFunctions
{
    SCATTER_FN_UPDATE = 0,
    SCATTER_FN_CONVERT_TO_GEOMETRY = 1,
    SCATTER_FN_GET_NUM_INSTANCES = 2,
    SCATTER_FN_GET_INSTANCE_OBJECT = 3,
    SCATTER_FN_GET_INSTANCE_TM = 4,
};

class ScatterFpOps : public  FPStaticInterface
{
public:

    /// Updates the given scatter instance for given time
    virtual int update(::Object* scatter, Point3 renderCameraPos, int time) = 0;
    virtual int convertToGeometry(::Object* _scatter, int time) = 0;
    virtual int getNumInstances(::Object* _scatter) = 0;
    virtual INode* getInstanceObject(::Object* _scatter, const int instanceId) = 0;
    virtual Matrix3 getInstanceTm(::Object* _scatter, const int instanceId) = 0;
};

//////////////////////////////////////////////////////////////////////////////
// Corona Material


enum MtlParamIDs : ParamID
{
    MTLP_COLOR_DIFFUSE = 101,
    MTLP_COLOR_REFLECT = 102,
    MTLP_COLOR_REFRACT = 103,
    MTLP_COLOR_OPACITY = 105,
    MTLP_COLOR_TRANSLUCENCY = 106,
    MTLP_COLOR_SELF_ILLUM = 107,
    MTLP_LEVEL_DIFFUSE = 121,
    MTLP_LEVEL_REFLECT = 122,
    MTLP_LEVEL_REFRACT = 123,
    MTLP_LEVEL_TRANSLUCENCY = 126,
    MTLP_LEVEL_OPACITY = 127,
    MTLP_LEVEL_SELF_ILLUM = 128,
    MTLP_TEXMAP_DIFFUSE = 141,
    MTLP_TEXMAP_REFLECT = 142,
    MTLP_TEXMAP_REFLECT_GLOSSINESS = 143,
    MTLP_TEXMAP_REFRACT = 144,
    MTLP_TEXMAP_REFRACT_GLOSSINESS = 145,
    MTLP_TEXMAP_OPACITY = 146,
    MTLP_TEXMAP_BUMP = 147,
    MTLP_TEXMAP_TRANSLUCENCY = 148,
    DEPRECATED_____EMISSION = 149,
    MTLP_TEXMAP_ANISOTROPY = 150,
    MTLP_TEXMAP_ANISO_ROTATION = 151,
    MTLP_TEXMAP_IOR = 152,
    MTLP_TEXMAP_FRESNEL_IOR = 153,
    MTLP_TEXMAP_DISPLACE = 154,
    DEPRECATED_____DIRECT_OVERRIDE = 155,
    MTLP_TEXMAP_BGOVERRIDE_REFLECT = 156,
    MTLP_TEXMAP_BGOVERRIDE_REFRACT = 157,
    MTLP_TEXMAP_SELF_ILLUM = 158,
    MTLP_TEXMAP_TRANSLUCENCY_FRACTION = 159,
    MTLP_USEMAP_DIFFUSE = 161,
    MTLP_USEMAP_REFLECT = 162,
    MTLP_USEMAP_REFLECT_GLOSSINESS = 163,
    MTLP_USEMAP_REFRACT = 164,
    MTLP_USEMAP_REFRACT_GLOSSINESS = 165,
    MTLP_USEMAP_OPACITY = 166,
    MTLP_USEMAP_BUMP = 167,
    MTLP_USEMAP_TRANSLUCENCY = 168,
    MTLP_USEMAP_ANISOTROPY = 170,
    MTLP_USEMAP_ANISO_ROTATION = 171,
    MTLP_USEMAP_IOR = 172,
    MTLP_USEMAP_FRESNEL_IOR = 173,
    MTLP_USEMAP_DISPLACE = 174,
    MTLP_USEMAP_BGOVERRIDE_REFLECT = 176,
    MTLP_USEMAP_BGOVERRIDE_REFRACT = 177,
    MTLP_USEMAP_SELF_ILLUM = 178,
    MTLP_USEMAP_TRANSLUCENCY_FRACTION = 179,
    MTLP_REFLECT_GLOSSINESS = 180,
    MTLP_REFRACT_GLOSSINESS = 181,
    MTLP_FRESNEL_IOR = 182,
    MTLP_IOR = 183,
    MTLP_ABSORPTION_DISTANCE = 188,
    MTLP_ABSORPTION_COLOR = 190,
    MTLP_ANISOTROPY = 194,
    MTLP_ANISO_ROTATION = 195,
    MTLP_ROUNDED_EDGES_RADIUS = 196,
    MTLP_ROUNDED_EDGES_SAMPLES = 197,
    MTLP_ALPHA_MODE = 201,
    MTLP_BSDF = 202,
    DEPRECATED_____SHADOW_CATCHER = 203,
    MTLP_GBUFFER_OVERRIDE = 205,
    MTLP_DISPLACE_WATER_LEVEL = 206,
    MTLP_DISPLACE_MIN = 207,
    MTLP_DISPLACE_MAX = 208,
    DEPRECATED_____MTLP_IS_PORTAL = 209,
    MTLP_TWOSIDED = 210,
    MTLP_USE_CAUSTICS = 211,
    DEPRECATED____MTLP_VISIBLE_IN_MASKS = 212,
    MTLP_LEGACY_A7_MODE = 213,
    MTLP_SSS_MODE = 214,
    MTLP_SCATTER_ALBEDO = 215,
    MTLP_SCATTER_G = 216,
    MTLP_MAPAMOUNT_DIFFUSE = 290,
    MTLP_MAPAMOUNT_REFLECT = 291,
    MTLP_MAPAMOUNT_REFLECT_GLOSSINESS = 292,
    MTLP_MAPAMOUNT_REFRACT = 293,
    MTLP_MAPAMOUNT_REFRACT_GLOSSINESS = 294,
    MTLP_MAPAMOUNT_OPACITY = 295,
    MTLP_MAPAMOUNT_BUMP = 296,
    MTLP_MAPAMOUNT_TRANSLUCENCY = 297,
    MTLP_MAPAMOUNT_ANISOTROPY = 299,
    MTLP_MAPAMOUNT_ANISO_ROTATION = 300,
    MTLP_MAPAMOUNT_IOR = 301,
    MTLP_MAPAMOUNT_FRESNEL_IOR = 302,
    MTLP_MAPAMOUNT_SELF_ILLUM = 303,
    MTLP_MAPAMOUNT_TRANSLUCENCY_FRACTION = 304,
    MTLP_TEXMAP_ATTENUATION_TINT = 305,
    MTLP_USEMAP_ATTENUATION_TINT = 306,
    MTLP_MAPAMOUNT_ATTENUATION_TINT = 307,
    MTLP_TEXMAP_SCATTER_ALBEDO = 308,
    MTLP_USEMAP_SCATTER_ALBEDO = 309,
    MTLP_MAPAMOUNT_SCATTER_ALBEDO = 310,
    MTLP_TEXMAP_ROUNDED_EDGES_RADIUS = 311,
    MTLP_USEMAP_ROUNDED_EDGES_RADIUS = 312,
    MTLP_MAPAMOUNT_ROUNDED_EDGES_RADIUS = 313,
    MTLP_VISIBLE_IN_MASKS = 314,
    MTLP_VOLUMETRIC_SINGLE_BOUNCE = 315,
    MTLP_DISPLACE_WATER_LEVEL_ON = 316,
};


//////////////////////////////////////////////////////////////////////////////
// Light Material

enum LightMtlParamID : ParamID
{
    LM_AFFECT_ALPHA = 100,
    LM_INTENSITY = 110,
    LM_TEXMAP = 111,
    LM_TEXMAP_ON = 112,
    LM_COLOR = 113,
    LM_ON_REFLECT = 122,
    LM_ON_DIRECT = 123,
    LM_ON_REFRACT = 124,
    LM_OPACITY_TEXMAP = 150,
    LM_OPACITY_TEXMAP_ON = 151,
    LM_OCCLUDE_OTHERS = 161,
    LM_EMIT_LIGHT = 162,
    LM_DIRECTIONALITY = 163,
    LM_EXCLUDE_LIST = 164,
    LM_INCLUDE_MODE = 165,
    LM_VISIBLE_IN_MASKS = 166,
    LM_ILLUMINATOR = 167,
    LM_TWOSIDED = 168,
};

//////////////////////////////////////////////////////////////////////////////
// Ray Switch

enum RaySwitchMtlParamID : ParamID
{
    RM_GI_MTL = 1600,
    RM_REFLECT_MTL = 1601,
    RM_REFRACT_MTL = 1602,
    RM_DIRECT_MTL = 1603,
};

//////////////////////////////////////////////////////////////////////////////
// Sun Object

const Interface_ID IFIREMAX_SUN_INTERFACE(0x3982738, 0x28370294);
struct IFireMaxSunInterface : public BaseInterface
{
    virtual void fmGetParams(const TimeValue t, INode* inode, Matrix3& outTm, Color& outColor, float& outSize) = 0;
};

//////////////////////////////////////////////////////////////////////////////
// Light

const Interface_ID IFIREMAX_LIGHT_INTERFACE(0x3982738, 0x28370295);
struct IFireMaxLightInterface : public BaseInterface
{
    virtual void fmGetRenderMesh(const TimeValue t, Mesh*& outMesh, BOOL& outNeedsDelete) = 0;
    virtual void fmGetRenderColor(const TimeValue t, const Matrix3& tm, Color& outColor, float& outIntensity, Texmap*& outTexmap) = 0;
};

enum LightParamID : ParamID
{
    L_VISIBLE_REFRACT = 119,
    L_ON = 120,
    L_TYPE = 121,
    L_DIRECTLY_VISIBLE = 122,
    L_IES_ON = 124,
    L_IES_FILE = 125,
    L_GIZMO_DISPLAY_SIZE = 126,
    L_SHARPNESS_FAKE = 127,
    L_VISIBLE_REFLECT = 128,
    L_CAST_SHADOWS = 129,
    L_COLOR_DIRECT = 130,
    L_INTENSITY = 131,
    L_COLOR_MODE = 132,
    L_BLACKBODY_TEMPERATURE = 133,
    L_WIDTH = 160, // + radius
    L_HEIGHT = 161,
    L_DIRECTIONALITY = 162,
    L_SEGMENTS = 163,
    L_EXCLUDE_LIST = 134,
    L_INCLUDE_MOD = 135,
    L_INTENSITY_UNITS = 136,
    L_TARGETED = 137,
    L_TARGET_DIST = 138,
    L_TEXMAP = 139,
    L_ILLUMINATOR = 140,
    L_TWOSIDED = 141,
    L_WIREFRAME = 142,
};

//////////////////////////////////////////////////////////////////////////////
// Sky Tex

enum SkyParamID : ParamID
{
    SKY_TURBIDITY = 101,
    SKY_MULTIPLIER = 102,
    SKY_GROUND_COLOR = 103,
    SKY_HORIZON_BLUR = 104,
    SKY_DELETED1 = 105,
    SKY_DELETED2 = 106,
    SKY_MODEL = 107,
    SKY_AFFECT_GROUND = 108,

    FAKESKY_HORIZON = 301,
    FAKESKY_ZENITH = 302,
    FAKESKY_SUNDISK = 303,
    FAKESKY_SUNSIDE = 304,
    FAKESKY_SUNBLEED = 306,
    FAKESKY_SUN_FALLOFF = 307,
};

//////////////////////////////////////////////////////////////////////////////
// Bitmap Tex

enum BitmapTexParamID : ParamID
{
	BMTEX_FILENAME = 0X65,			// TYPE_FILENAME
	BMTEX_OUTPUT = 0X64,			// TYPE_REFTARG
	BMTEX_UVWCHANNEL = 0X67,		// TYPE_INT
	BMTEX_ENVIROMAPPING = 0X66,		// TYPE_INT
	BMTEX_FILTERINGBLUR = 0X6B,		// TYPE_FLOAT
	BMTEX_UVWSCALE = 0X69,			// TYPE_POINT3
	BMTEX_UVWOFFSET = 0X6A,			// TYPE_POINT3
	BMTEX_UVWANGLE = 0X6F,			// TYPE_POINT3
	BMTEX_TILINGU = 0X6C,			// TYPE_INT
	BMTEX_TILINGV = 0X6D,			// TYPE_INT
	BMTEX_INTERPOLATION = 0X6E,		// TYPE_INT
	BMTEX_REALWORLDSCALE = 0X72,	// TYPE_BOOL
	BMTEX_ALPHASOURCE = 0X73,		// TYPE_INT
	BMTEX_MONOCHANNELOUTPUT = 0X75,	// TYPE_INT
	BMTEX_RGBCHANNELOUTPUT = 0X76,	// TYPE_INT
	BMTEX_CLIPPINGU = 0X79,			// TYPE_FLOAT
	BMTEX_CLIPPINGV = 0X7A,			// TYPE_FLOAT
	BMTEX_CLIPPINGWIDTH = 0X7B,		// TYPE_FLOAT
	BMTEX_CLIPPINGHEIGHT = 0X7C,	// TYPE_FLOAT
	BMTEX_CLIPPINGON = 0X77,		// TYPE_BOOL
	BMTEX_CLIPPINGMODE = 0X78,		// TYPE_INT
	BMTEX_GAMMA = 0X7D				// TYPE_FLOAT
};

//////////////////////////////////////////////////////////////////////////////
// Layered Material

enum LayeredMtlParamID : ParamID
{
	LAYEREDMTL_BASEMTL = 0X3E8,		// TYPE_MTL
	LAYEREDMTL_LAYERS = 0X3E9,		// TYPE_MTL_TAB
	LAYEREDMTL_MIXMAPS = 0X3EB,		// TYPE_TEXMAP_TAB
	LAYEREDMTL_AMOUNTS = 0X3EA		// TYPE_FLOAT_TAB
};

//////////////////////////////////////////////////////////////////////////////
// Mix Tex

enum MixTexParamID : ParamID
{
	MIXTEX_MIXOPERATION = 0XC8,		// TYPE_INT
	MIXTEX_MIXAMOUNT = 0XC9,		// TYPE_FLOAT
	MIXTEX_MULTIPLIERTOP = 0XCA,	// TYPE_FLOAT
	MIXTEX_SCALEBOTTOM = 0XCB,		// TYPE_FLOAT
	MIXTEX_OFFSETTOP = 0XCC,		// TYPE_FLOAT
	MIXTEX_OFFFSETBOTTOM = 0XCD,	// TYPE_FLOAT
	MIXTEX_TEXMAPTOP = 0XCE,		// TYPE_TEXMAP
	MIXTEX_TEXMAPBOTTOM = 0XCF,		// TYPE_TEXMAP
	MIXTEX_TEXMAPMIX = 0XD2,		// TYPE_TEXMAP
	MIXTEX_COLORBOTTOM = 0XD1,		// TYPE_RGBA
	MIXTEX_COLORTOP = 0XD0,			// TYPE_RGBA
	MIXTEX_TEXMAPMIXON = 0XD3,		// TYPE_BOOL
	MIXTEX_TEXMAPTOPON = 0XD4,		// TYPE_BOOL
	MIXTEX_TEXMAPBOTTOMON = 0XD5	// TYPE_BOOL
};


//////////////////////////////////////////////////////////////////////////////
// Color Tex

enum ColorTexParamID : ParamID
{
	COLORTEX_COLOR = 0X34,			// TYPE_RGBA
	COLORTEX_COLORHDR = 0X3A,		// TYPE_POINT3
	COLORTEX_ALPHA = 0X38,			// TYPE_FLOAT
	COLORTEX_MULTIPLIER = 0X39,		// TYPE_FLOAT
	COLORTEX_TEMPERATURE = 0X33,	// TYPE_FLOAT
	COLORTEX_METHOD = 0X32,			// TYPE_INT
	COLORTEX_HEXCOLOR = 0X3B,		// TYPE_STRING
	COLORTEX_INPUTISLINEAR = 0X3C	// TYPE_BOOL
};


//////////////////////////////////////////////////////////////////////////////
// Shadow Catcher

enum ShadowCatcherMtlParamID : ParamID
{
	SHADOWCATCHER_BACKPLATECOLOR = 0X12D,			//	TYPE_RGBA
	SHADOWCATCHER_BACKPLATETEXMAP = 0X12E,			//	TYPE_TEXMAP
	SHADOWCATCHER_COLORREFLECT = 0X133,				//	TYPE_RGBA
	SHADOWCATCHER_SHADOWAMOUNT = 0X130,				//	TYPE_FLOAT
	SHADOWCATCHER_REFLECTLEVEL = 0X132,				//	TYPE_FLOAT
	SHADOWCATCHER_REFLECTIOR = 0X134,				//	TYPE_FLOAT
	SHADOWCATCHER_REFLECTGLOSSINESS = 0X135,		//	TYPE_FLOAT
	SHADOWCATCHER_ALPHAMODE = 0X12F,				//	TYPE_INT
	SHADOWCATCHER_OFSCREENMAP = 0X15E,				//	TYPE_TEXMAP
	SHADOWCATCHER_PROJECTIONMODE = 0X136,			//	TYPE_INT
	SHADOWCATCHER_PRESERVEASPECTRATIO = 0X137,		//	TYPE_BOOL
	SHADOWCATCHER_USEENVIROOFFSCREEN = 0X138,		//	TYPE_BOOL
	SHADOWCATCHER_OFFSCREENCOLOR = 0X139,			//	TYPE_RGBA
	SHADOWCATCHER_FRESNELIORTEXMAP = 0X15F,			//	TYPE_TEXMAP
	SHADOWCATCHER_REFLECTGLOSSINESSTEXMAP = 0X160,	//	TYPE_TEXMAP
	SHADOWCATCHER_REFLECTCOLORTEXMAP = 0X162,		//	TYPE_TEXMAP
	SHADOWCATCHER_BUMP = 0X161,						//	TYPE_TEXMAP
	SHADOWCATCHER_BUMPAMOUNT = 0X163,				//	TYPE_FLOAT
	SHADOWCATCHER_PROJECTREFLECTIONMAPS = 0X164		//	TYPE_BOOL
};

//////////////////////////////////////////////////////////////////////////////
// Corona Light

enum CoronaLightParamID : ParamID
{
	LIGHT_ON = 0X78,						// TYPE_BOOL
	LIGHT_SHAPE = 0X79,						// TYPE_INT
	LIGHT_VISIBLEDIRECTLY = 0X7A,			// TYPE_BOOL
	LIGHT_VISIBLEREFL = 0X80,				// TYPE_BOOL
	LIGHT_VISIBLEREFR = 0X77,				// TYPE_BOOL
	LIGHT_OCCLUDEOTHERLIGHTS = 0X81,		// TYPE_BOOL
	LIGHT_COLOR = 0X82,						// TYPE_RGBA
	LIGHT_INTENSITY = 0X83,					// TYPE_FLOAT
	LIGHT_COLORMODE = 0X84,					// TYPE_INT
	LIGHT_INTENSITYUNITS = 0X88,			// TYPE_INT
	LIGHT_BLACKBODYTEMP = 0X85,				// TYPE_FLOAT
	LIGHT_EXCLUDELIST = 0X86,				// TYPE_INODE_TAB
	LIGHT_EXCLUDEINCLUDEMOD = 0X87,			// TYPE_BOOL
	LIGHT_TARGETED = 0X89,					// TYPE_BOOL
	LIGHT_TARGETDISTANCE = 0X8A,			// TYPE_FLOAT
	LIGHT_HEIGHT = 0XA1,					// TYPE_WORLD
	LIGHT_WIDTH = 0XA0,						// TYPE_WORLD
	LIGHT_DIRECTIONALITY = 0XA2,			// TYPE_FLOAT
	LIGHT_SEGMENTS = 0XA3,					// TYPE_INT
	LIGHT_IESON = 0X7C,						// TYPE_BOOL
	LIGHT_IESFILE = 0X7D,					// TYPE_FILENAME
	LIGHT_IESSHARPNESSFAKE = 0X7F,			// TYPE_BOOL
	LIGHT_GIZMODISPLAYSIZE = 0X7E,			// TYPE_FLOAT
	LIGHT_TEXMAP = 0X8B,					// TYPE_TEXMAP
	LIGHT_SHADOWCATCHERILLUMINATOR = 0X8C,	// TYPE_BOOL
	LIGHT_TWOSIDEDEMISSION = 0X8D,			// TYPE_BOOL
	LIGHT_VIEWPORTWIREFRAME = 0X8E			// TYPE_BOOL
};

CORONA_NAMESPACE_END;
